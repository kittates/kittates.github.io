[{"title":"Typescript","path":"/2024/05/20/2024-5-20/","content":"Reference 第一章 快速入门 ¶0、TypeScript简介 TypeScript是JavaScript的超集。 它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。 TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。 TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。 相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能；TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。 ¶1、TypeScript 开发环境搭建 安装typescript 1npm i typescript -g 创建一个hello.ts文件 1console.log(&quot;hello world&quot;); 编译 1tsc hello.ts 编译完成后当前目录就有了对应的JS文件了 ¶2、基本类型 类型声明 类型声明是TS非常重要的一个特点 通过类型声明可以指定TS中变量（参数、形参）的类型 指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错 简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值 语法： 1234567let 变量: 类型;let 变量: 类型 = 值;function fn(参数: 类型, 参数: 类型): 类型&#123; ...&#125; 自动类型判断 TS拥有自动的类型判断机制 当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型 所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明 例如如下： 1let c = true;\t//c会被自动识别为Boolen型 如果发现类型不匹配，就会报错。即使报错，也能编译通过。之后可以设置使其报错无法通过编译。 可以通过指定相应的配置，使其编译成指定的JS版本，后面学到。 但是对于下面： 1234function fun(a:number,b:string) &#123; return a+b;&#125;console.log(fun(123,&quot;123&quot;)); 输出的结果仍未&quot;123123&quot;，这是因为没有规定fun返回的类型 修改后： 1234function fun(a:number,b:number): number&#123; return a+b;&#125;console.log(fun(123,1)); 类型： 类型 例子 描述 number 1, -33, 2.5 任意数字 string ‘hi’, “hi”, hi 任意字符串 boolean true、false 布尔值true或false 字面量 其本身 限制变量的值就是该字面量的值 any * 任意类型 unknown * 类型安全的any void 空值（undefined） 没有值（或undefined） never 没有值 不能是任何值 object {name:‘孙悟空’} 任意的JS对象 array [1,2,3] 任意JS数组 tuple [4,5] 元素，TS新增类型，固定长度数组 enum enum{A, B} 枚举，TS中新增类型 number let decimal: number = 6; let hex: number = 0xf00d; let binary: number = 0b1010; let octal: number = 0o744; let big: bigint = 100n; 12345- boolean - ```typescript let isDone: boolean = false; string let color: string = &quot;blue&quot;; color = 'red'; let fullName: string = `Bob Bobbington`; let age: number = 37; let sentence: string = `Hello, my name is $&#123;fullName&#125;. `I'll be $&#123;age + 1&#125; years old next month.`; 123456789101112- 字面量 - 也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围 - ```typescript let a: 10;\t//a只能为10，不能再修改了 let color: &#x27;red&#x27; | &#x27;blue&#x27; | &#x27;black&#x27;;\t//color的取值范围为[red、blue、black] let num: 1 | 2 | 3 | 4 | 5; let c = boolean | string;\t//可以使用 | 来连接多个类型（联合类型） c = true; c = &#x27;hello&#x27;; any: 不建议使用 let d: any = 4; d = 'hello'; d = true; let c: any; c = 1 c = 'h' 123456789上面的为显示的any下面为隐式的any```tslet d;\t//声明变量时不指定类型，则TS解析器会自动判断变量的类型为any,隐式的anyd = &#x27;hello&#x27;;d = true; 可以赋值给其他变量，如下： 123let a:any,b:number;a = 1;b = a; unknown：实际上是一个类型安全的any，不能赋值给其它变量 12let notSure: unknown = 4;notSure = &#x27;hello&#x27;; 123let a:unknown,b:number;a = 1;b = a;\t//报错 不能将未知类型的变量赋值给一个确定类型的变量，但是两个unknown可以相互赋值 void：主要用于为函数设置为空的返回值 let unusable: void = undefined; function fun()&#123;&#125;\t//没有明确指出，默认为void类型 1234567- never：通常用于指示一个函数永远不会正常返回，例如抛出错误、进入无限循环。- ```typescript function error(message: string): never &#123; throw new Error(message); &#125; object（没啥用） let obj: object = &#123;&#125;; 1234567- &#123;&#125; ：可以定义内部属性的类型 ```ts let b: &#123;name: string,age?: number&#125;\t//?表示age为可选项 b = &#123;name: &#x27;kittates&#x27;&#125; b = &#123;name: &#x27;abc&#x27;,age: 10&#125;; 12let b: &#123;name: &#x27;kittates&#x27;,age: 12&#125;;\t//b只能为&#123;name: &#x27;kittates&#x27;,age: 12&#125;，否则报错b = &#123;name: &#x27;kittates&#x27;,age: 12&#125;; 12345678910let c: &#123;name: string,[propName:string]:any&#125;\t//propName可以取任何名，只是在这里代指一下c = &#123; name: &#x27;kittates&#x27;, age: 12, product: &#123; item: &#x27;abc&#x27;, price: 12 &#125;&#125;console.log(c); [propName: string]: any: 这部分使用了索引签名。它表示 c 可以有任意数量的其他属性，这些属性的键名是字符串类型，而对应的值可以是任意类型（any）。这使得 c 可以包含除了 name 外的其他属性，并且这些属性的值可以是任何类型。 设置函数结构的类型声明 123456//声明了c的两个参数为number型,且返回值也为number//a、b可以取任何名，只是在这里代指一下let c: (a:number,b:number) =&gt; number;\tc = function(n1:number,n2:number):number &#123; return n1+n2;&#125; array 12let list: number[] = [1, 2, 3];\t//声明number类型的数组let list: Array&lt;number&gt; = [1, 2, 3]; 12345let list: string[];\t//声明string类型的数组list = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]let list1: Array&lt;string&gt;;list1 = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;] tuple：元组-固定长度的数组 let x: [string, number];\t//第一个元素为string，第二个元素为string x = [&quot;hello&quot;, 10]; 12345678910111213141516171819202122232425262728293031- enum - ```typescript enum Color &#123; Red, Green, Blue, &#125; let c: Color = Color.Green; enum Color &#123; Red = 1, Green, Blue, &#125; let c: Color = Color.Green; enum Color &#123; Red = 1, Green = 2, Blue = 4, &#125; let c: Color = Color.Green; enum Gender &#123; male = 0, female = 1 &#125; let i: &#123;name: string,gender: Gender&#125;; i = &#123;name: &quot;kittates&quot;,gender: Gender.male&#125;; 类型断言 有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式： 第一种：as let someValue: unknown = &quot;this is a string&quot;; let strLength: number = (someValue as string).length; 123456- 第二种：&lt;string&gt; &lt;number&gt; - ```typescript let someValue: unknown = &quot;this is a string&quot;; let strLength: number = (&lt;string&gt;someValue).length; &amp;型 12let j: &#123;name: string&#125; &amp; &#123;age: number&#125;;j = &#123;name: &quot;kittates&quot;,age: 12&#125;; 声明了j必须包含name:string类型的数据和age:number类型的数据，不能多，也不能少。 类型别名 123type myType = 1 | 2 | 3 | 4 | 5 //另起一个名字let k: myTypek = 2 ¶3、TS编译选项 自动编译文件 编译文件时，使用 -w 指令后，TS编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译。 示例： tsc xxx.ts -w 123456789101112131415161718192021222324252627 如果要监视每个文件，就要为每个文件都开启一个tsc监视，会显得繁琐，所以需要能够对整个项目监视并自动重新编译。- 自动编译整个项目 - 如果**直接使用tsc指令**，则可以自动将当前项目下的所有ts文件编译为js文件。 - 但是能直接使用tsc命令的前提时，要先**在项目根目录下创建一个ts的配置文件 tsconfig.json** - tsconfig.json是一个JSON文件，添加配置文件后，只需只需 tsc 命令即可完成对整个项目的编译 使用`tsc --init`命令会自动生成相应的`tsconfig.json`文件，然后在使用`tsc`或者`tsc -w`即可 - 配置选项： &lt;p style=&quot;color: pink&quot;&gt;一个*表示任意文件，**表示任意目录&lt;/p&gt; - include - 定义希望被编译文件所在的目录 - 默认值：[&quot;\\*\\*/\\*&quot;] - 示例： - ```json &quot;include&quot;:[&quot;src/**/*&quot;, &quot;tests/**/*&quot;] - 上述示例中，所有src目录和tests目录下的文件都会被编译 exclude 定义需要排除在外的目录 默认值：[“node_modules”, “bower_components”, “jspm_packages”] 示例： &quot;exclude&quot;: [&quot;./src/hello/**/*&quot;] 1234567891011 - 上述示例中，src下hello目录下的文件都不会被编译- extends - 定义被继承的配置文件 - 示例： - ```json &quot;extends&quot;: &quot;./configs/base&quot; 上述示例中，当前配置文件中会自动包含config目录下base.json中的所有配置信息 files 指定被编译文件的列表，只有需要编译的文件少时才会用到 示例： &quot;files&quot;: [ &quot;core.ts&quot;, &quot;sys.ts&quot;, &quot;types.ts&quot;, &quot;scanner.ts&quot;, &quot;parser.ts&quot;, &quot;utilities.ts&quot;, &quot;binder.ts&quot;, &quot;checker.ts&quot;, &quot;tsc.ts&quot; ] 12345678910111213141516171819202122232425 - 列表中的文件都会被TS编译器所编译- compilerOptions - 编译选项是配置文件中**非常重要**也**比较复杂**的配置选项 - 在compilerOptions中包含多个子选项，用来完成对编译的配置 - 项目选项 - target - 设置ts代码编译的目标版本 - 可选值： - ES3（默认）、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext(表示最新版的) - 示例： - ```json &quot;compilerOptions&quot;: &#123; &quot;target&quot;: &quot;ES6&quot; &#125; - 如上设置，我们所编写的ts代码将会被编译为ES6版本的js代码 - lib：一般不需要修改，除非是在非web环境下 - 指定代码运行时所包含的库（宿主环境） - 可选值： - ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ...... - 示例： - ```json &quot;compilerOptions&quot;: &#123; &quot;target&quot;: &quot;ES6&quot;, &quot;lib&quot;: [&quot;ES6&quot;, &quot;DOM&quot;], &quot;outDir&quot;: &quot;dist&quot;, &quot;outFile&quot;: &quot;dist/aa.js&quot; &#125; 123456789101112131415- module - 设置编译后代码使用的模块化系统 - 可选值： - CommonJS(nodejs方式)、UMD、AMD、System、ES2020、ESNext、None - 示例： - ```typescript &quot;compilerOptions&quot;: &#123; &quot;module&quot;: &quot;CommonJS&quot; &#125; - outDir - 编译后文件的所在目录 - 默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置 - 示例： - ```json &quot;compilerOptions&quot;: &#123; &quot;outDir&quot;: &quot;dist&quot; &#125; 123456789101112131415 - 设置后编译后的js文件将会生成到dist目录- outFile - **将所有的文件编译为一个js文件** - 默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果module制定了None、System或AMD则会将模块一起合并到文件之中 - 示例： - ```json &quot;compilerOptions&quot;: &#123; &quot;outFile&quot;: &quot;dist/app.js&quot; &#125; &lt;p style=&quot;color: pink&quot;&gt;但是outFile 仅支持 &quot;amd&quot; 和 &quot;system&quot; 模块。&lt;/p&gt; - rootDir - 指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录 - 示例： - ```json &quot;compilerOptions&quot;: &#123; &quot;rootDir&quot;: &quot;./src&quot; &#125; 12345678910111213141516- allowJs - 是否对js文件编译，默认是不对JS编译的。如果源文件中含有JS文件，allowJs为false时，目标文件中不会有JS文件- checkJs - 是否对js文件进行检查 - 示例： - ```json &quot;compilerOptions&quot;: &#123; &quot;allowJs&quot;: true, &quot;checkJs&quot;: true &#125; - removeComments - 是否删除注释 - 默认值：false - noEmit - 不对代码进行编译 - 默认值：false - noEmitOnError:当有错误时不生成编译后的文件 - sourceMap - 是否生成sourceMap - 默认值：false - 严格检查 - strict：建议开启，所以其默认值为true - 启用所有的严格检查，默认值为true，**设置后相当于开启了所有的严格检查** js中在文件开头使用`&quot;use strict&quot;;`就开启了严格模式，如下： 12345&quot;use strict&quot;;Object.defineProperty(exports, &quot;__esModule&quot;, &#123; value: true &#125;);const hello_js_1 = require(&quot;./hello.js&quot;);console.log(hello_js_1.default); [参考1](https://wangdoc.com/javascript/oop/strict) [参考2](https://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html) - alwaysStrict - 总是以严格模式对代码进行编译 - noImplicitAny - 禁止隐式的any类型 没有指定一个变量的类型时默认为any，所以使用noImplicityAny可以禁用any类型 - noImplicitThis - 禁止类型不明确的this，例如如下就会报错 123function fun() &#123; alert(this)&#125; 如果指明了this的类型，就可以使用，如下： 123function fun(this:Window) &#123; alert(this)&#125; - strictBindCallApply - 严格检查bind、call和apply的参数列表 - strictFunctionTypes - 严格检查函数的类型 - strictNullChecks - 严格的空值检查 1234let box1 = document.querySelector(&#x27;box&#x27;);box1.addEventListener(&#x27;click&#x27;,() =&gt; &#123; alert(111);&#125;) 例如上述代码，获取的box1可能为空，所以设置strictNullChecks为true后，可能会检测错来 ![image-20240305103616210](image-20240305103616210.png) 可以改为如下： 123456let box1 = document.querySelector(&#x27;box&#x27;);if(box1) &#123;\t//先判断是否为Null，然后再去绑定事件 box1.addEventListener(&#x27;click&#x27;,() =&gt; &#123; alert(111); &#125;)&#125; 如果已经确定了box1确实存在，则可以使用!来抑制。！为空抑制运算符 1let box1 = document.querySelector(&#x27;box&#x27;)!; - strictPropertyInitialization - 严格检查属性是否初始化 - 额外检查 - noFallthroughCasesInSwitch - 检查switch语句包含正确的break - noImplicitReturns - 检查函数没有隐式的返回值 - noUnusedLocals - 检查未使用的局部变量 - noUnusedParameters - 检查未使用的参数 - 高级 - allowUnreachableCode - 检查不可达代码 - 可选值： - true，忽略不可达代码 - false，不可达代码将引起错误 - noEmitOnError - 有错误的情况下不进行编译 - 默认值：false ¶4、webpack 不同的版本可能会报错，配置信息看snake项目 通常情况下，实际开发中我们都需要使用构建工具对代码进行打包，TS同样也可以结合构建工具一起使用，下边以webpack为例介绍一下如何结合构建工具使用TS。 步骤： 初始化项目 进入项目根目录，执行命令 npm init -y 主要作用：创建package.json文件 下载构建工具 npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin 共安装了7个包 webpack 构建工具webpack webpack-cli webpack的命令行工具 webpack-dev-server webpack的开发服务器，可以根据项目的改变自动编译并运行，实时更新 在package.json中需要添加: 1&quot;start&quot;: &quot;webpack serve --open chrome.exe&quot; 启动webpack服务器，并在Chrome中运行。 执行如下命令来启动服务器 123npm run start#ornpm start typescript ts编译器 ts-loader ts加载器，用于在webpack中编译ts文件 html-webpack-plugin webpack中html插件，用来自动创建html文件，并引入相应的文件 clean-webpack-plugin webpack中的清除插件，每次构建都会先清除dist目录，以保证dist中的内容都是当前最新的。 根目录下创建webpack的配置文件webpack.config.js const path = require('path'); const HTMLWebpackPlugin = require('html-webpack-plugin'); const &#123;CleanWebpackPlugin&#125; = require('clean-webpack-plugin'); module.exports = &#123; entry: './src/index.ts', //指定入口文件 devtool: &quot;inline-source-map&quot;, devServer: &#123; contentBase: './dist' &#125;, output: &#123; path: path.resolve(__dirname,'dist'), //指定打包后的文件存放的目录 filename: 'bundle.js', //打包后的文件名 &#125;, module: &#123; //指定webpack打包时要使用的模块 rules: [ //指定要加载的规则 &#123; test: /\\.ts$/, //test指定的是规则生效的文件，可以使用正则 use: 'ts-loader', //针对上面的文件使用ts-loader exclude: /node_modules/, //要排除的文件 &#125; ] &#125;, //放置插件 plugins: [ new CleanWebpackPlugin(), new HTMLWebpackPlugin(&#123; //自动生成html文件，并引入先关的资源 title:'KITTATES', //添加title配置项，设置生成的html title为KITTATES // template: './src/index.html', //生成的html模板是根据这个template生成的 &#125;), ], resolve: &#123; extensions: ['.ts','.js','.jsx'], //ts、js都可以作为模块使用 &#125; &#125; 12345678910114. 根目录下创建tsconfig.json，配置可以根据自己需要，是一个`json`文件 - ```json &#123; &quot;compilerOptions&quot;: &#123; &quot;target&quot;: &quot;ES2015&quot;, &quot;module&quot;: &quot;ES2015&quot;, &quot;strict&quot;: true &#125; &#125; 修改package.json添加如下配置，是一个json文件 &#123; ...略... &quot;scripts&quot;: &#123; &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;, &quot;build&quot;: &quot;webpack&quot;,\t//可以通过npm run build命令直接执行webpack &quot;serve&quot;: &quot;webpack serve --open --mode production&quot; &#125;, ...略... &#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061 6. 在src下创建ts文件，并在并命令行执行```npm run build```对代码进行编译，或者执行```npm start```来启动开发服务器 ## 5、Babel&lt;p style=&quot;color:red&quot;&gt;这一块没看&lt;/p&gt;- 经过一系列的配置，使得TS和webpack已经结合到了一起，除了webpack，开发中还经常需要结合babel来对代码进行转换以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将babel引入到项目中。 1. 安装依赖包： - ```npm i -D @babel/core @babel/preset-env babel-loader core-js``` - 共安装了4个包，分别是： - @babel/core - babel的核心工具 - @babel/preset-env - babel的预定义环境 - @babel-loader - babel在webpack中的加载器 - core-js - core-js用来使老版本的浏览器支持新版ES语法 2. 修改webpack.config.js配置文件 - ```javascript ...略... module: &#123; rules: [ &#123; test: /\\.ts$/, use: [ &#123; loader: &quot;babel-loader&quot;, options:&#123; presets: [ [ &quot;@babel/preset-env&quot;, &#123; &quot;targets&quot;:&#123; &quot;chrome&quot;: &quot;58&quot;, &quot;ie&quot;: &quot;11&quot; &#125;, &quot;corejs&quot;:&quot;3&quot;, &quot;useBuiltIns&quot;: &quot;usage&quot; &#125; ] ] &#125; &#125;, &#123; loader: &quot;ts-loader&quot;, &#125; ], exclude: /node_modules/ &#125; ] &#125; ...略... 如此一来，使用ts编译后的文件将会再次被babel处理，使得代码可以在大部分浏览器中直接使用，可以在配置选项的targets中指定要兼容的浏览器版本。 第二章：面向对象 类是对象的抽象，对象是类的实例 面向对象是程序中一个非常重要的思想，它被很多同学理解成了一个比较难，比较深奥的问题，其实不然。面向对象很简单，简而言之就是程序之中所有的操作都需要通过对象来完成。 举例来说： 操作浏览器要使用window对象 操作网页要使用document对象 操作控制台要使用console对象 一切操作都要通过对象，也就是所谓的面向对象，那么对象到底是什么呢？这就要先说到程序是什么，计算机程序的本质就是对现实事物的抽象，抽象的反义词是具体，比如：照片是对一个具体的人的抽象，汽车模型是对具体汽车的抽象等等。程序也是对事物的抽象，在程序中我们可以表示一个人、一条狗、一把枪、一颗子弹等等所有的事物。一个事物到了程序中就变成了一个对象。 在程序中所有的对象都被分成了两个部分数据和功能，以人为例，人的姓名、性别、年龄、身高、体重等属于数据，人可以说话、走路、吃饭、睡觉这些属于人的功能。数据在对象中被成为属性，而功能就被称为方法。所以简而言之，在程序中一切皆是对象。 ¶1、类（class） 要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何创建对象。要创建对象，必须要先定义类，所谓的类可以理解为对象的模型，程序中可以根据类创建指定类型的对象，举例来说：可以通过Person类来创建人的对象，通过Dog类创建狗的对象，通过Car类来创建汽车的对象，不同的类可以用来创建不同的对象。 定义类： class 类名 &#123; 属性名: 类型;\t//里面不使用 constructor(参数: 类型)&#123; this.属性名 = 参数; &#125; 方法名()&#123; .... &#125; &#125; 1234567891011121314151617- 示例： - ```typescript class Person&#123; name: string; age: number; constructor(name: string, age: number)&#123; this.name = name; this.age = age; &#125; sayHello()&#123; console.log(`大家好，我是$&#123;this.name&#125;`); &#125; &#125; 使用类： const p = new Person('孙悟空', 18); p.sayHello(); 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647## 2、面向对象的特点- 封装 - 对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装 - 默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在TS中可以对属性的权限进行设置 - 只读属性（**readonly**）： - 如果在声明属性时添加一个readonly，则属性便成了只读属性无法修改 - TS中属性具有三种修饰符： - public（默认值），可以在类、子类和对象中修改 - protected ，可以在类、子类中修改 - private ，可以在类中修改 - 示例： - public - ```typescript class Person&#123; public name: string; // 写或什么都不写都是public public age: number; constructor(name: string, age: number)&#123; this.name = name; // 可以在类中修改 this.age = age; &#125; sayHello()&#123; console.log(`大家好，我是$&#123;this.name&#125;`); &#125; &#125; class Employee extends Person&#123; constructor(name: string, age: number)&#123; super(name, age); this.name = name; //子类中可以修改 &#125; &#125; const p = new Person(&#x27;孙悟空&#x27;, 18); p.name = &#x27;猪八戒&#x27;;// 可以通过对象修改 - protected - ```typescript class Person&#123; protected name: string; protected age: number; constructor(name: string, age: number)&#123; this.name = name; // 可以修改 this.age = age; &#125; sayHello()&#123; console.log(`大家好，我是$&#123;this.name&#125;`); &#125; &#125; class Employee extends Person&#123; constructor(name: string, age: number)&#123; super(name, age); this.name = name; //子类中可以修改 &#125; &#125; const p = new Person('孙悟空', 18); p.name = '猪八戒';// 不能修改 12345678910111213141516171819202122232425262728- private - ```typescript class Person&#123; private name: string; private age: number; constructor(name: string, age: number)&#123; this.name = name; // 可以修改 this.age = age; &#125; sayHello()&#123; console.log(`大家好，我是$&#123;this.name&#125;`); &#125; &#125; class Employee extends Person&#123; constructor(name: string, age: number)&#123; super(name, age); this.name = name; //子类中不能修改 &#125; &#125; const p = new Person(&#x27;孙悟空&#x27;, 18); p.name = &#x27;猪八戒&#x27;;// 不能修改 属性存取器 对于一些不希望被任意修改的属性，可以将其设置为private 直接将其设置为private将导致无法再通过对象修改其中的属性 我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器 读取属性的方法叫做setter方法，设置属性的方法叫做getter方法 示例： class Person&#123; private _name: string; constructor(name: string)&#123; this._name = name; &#125; get MyName()&#123;\t//MyName是被调用时获取属性的方法名字 return this._name; &#125; set MyName(name: string)&#123;\t//同上 this._name = name; &#125; &#125; const p1 = new Person('孙悟空'); console.log(p1.MyName); // 通过getter读取name属性 p1.MyName = '猪八戒'; // 通过setter修改name属性 console.log(p1.MyName); 1234567891011121314151617181920- 静态属性 - 静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用 - 静态属性（方法）使用static开头 - 示例： - ```typescript class Tools&#123; static PI = 3.1415926; static sum(num1: number, num2: number)&#123; return num1 + num2 &#125; &#125; console.log(Tools.PI); console.log(Tools.sum(123, 456)); 实例属性：如下中的name即为实例属性 123class Person &#123; name: string = &#x27;kittates&#x27;;&#125; this 在类中，使用this表示当前对象 继承 继承时面向对象中的又一个特性 通过继承可以将其他类中的属性和方法引入到当前类中 示例： class Animal&#123; name: string; age: number; constructor(name: string, age: number)&#123; this.name = name; this.age = age; &#125; &#125; class Dog extends Animal&#123; bark()&#123; console.log(`$&#123;this.name&#125;在汪汪叫！`); &#125; &#125; const dog = new Dog('旺财', 4); dog.bark(); 12345678910111213141516171819202122232425262728293031323334353637- 通过继承可以在不修改类的情况下完成对类的扩展- 重写 - 发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的**重写** - 示例： - ```typescript class Animal&#123; name: string; age: number; constructor(name: string, age: number)&#123; this.name = name; this.age = age; &#125; run()&#123; console.log(`父类中的run方法！`); &#125; &#125; class Dog extends Animal&#123; bark()&#123; console.log(`$&#123;this.name&#125;在汪汪叫！`); &#125; run()&#123; console.log(`子类中的run方法，会重写父类中的run方法！`); &#125; &#125; const dog = new Dog(&#x27;旺财&#x27;, 4); dog.bark(); 在子类中可以使用super来完成对父类的引用 抽象类（abstract class） 抽象类是专门用来被其他类所继承的类，它只能被其他类所继承不能用来创建实例。只定义其结构，而其具体的实现有相应的继承它的子类来实现。 abstract class Animal&#123; abstract run(): void; bark()&#123; console.log('动物在叫~'); &#125; &#125; class Dog extends Animals&#123; run()&#123; console.log('狗在跑~'); &#125; &#125; 12345678910111213141516171819202122232425 - 使用abstract开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现 ## 3、接口（Interface）只有TS中由，JS中没有接口这个东西接口的作用类似于抽象类，不同点在于接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法。**接口主要负责定义一个类的结构**，接口可以去限制一个对象的接口，对象只有包含接口中定义的所有属性和方法时才能匹配接口。同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性。**可以当成一个类型去使用**- 示例（检查对象类型）： - ```typescript interface Person&#123; name: string; sayHello():void; &#125; function fn(per: Person)&#123; per.sayHello(); &#125; fn(&#123;name:&#x27;孙悟空&#x27;, sayHello() &#123;console.log(`Hello, 我是 $&#123;this.name&#125;`)&#125;&#125;); 示例（实现） 下面的这种接口实现：实际上就是定义了一种标准，每个实现的类都需要具有这些统一的标准，而不能各自去实现 interface Person&#123; name: string; sayHello():void; &#125; class Student implements Person&#123;\t//实现接口内部的具体实现 constructor(public name: string) &#123; this.name = name; &#125; sayHello() &#123; console.log('大家好，我是'+this.name); &#125; &#125; 12345678910111213141516171819 ## 4、泛型（Generic）[参考泛型文档](https://ts.xcatliu.com/advanced/generics.html)定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定），此时泛型便能够发挥作用。泛型可以实现用户将数据传给类- 举个例子： - ```typescript function test(arg: any): any&#123; return arg; &#125; 上例中，test函数有一个参数类型不确定，但是能确定的是其返回值的类型和参数的类型是相同的，由于类型不确定所以参数和返回值均使用了any，但是很明显这样做是不合适的，首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型 使用泛型： function test&lt;T&gt;(arg: T): T&#123; return arg; &#125; 123456789- 这里的```&lt;T&gt;```就是泛型，T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型。所以泛型其实很好理解，**就表示某个类型。**- 那么如何使用上边的函数呢？ - 方式一（直接使用）： - ```typescript test(10) - 使用时可以直接传递参数使用，**类型会由TS自动推断出来**，但有时编译器无法自动推断时还需要使用下面的方式 - 方式二（指定类型）： - ```typescript test&lt;number&gt;(10) 1234567891011 - 也可以在函数后手动指定泛型- 可以同时指定多个泛型，泛型间使用逗号隔开： - ```typescript function test&lt;T, K&gt;(a: T, b: K): K&#123; return b; &#125; test&lt;number, string&gt;(10, &quot;hello&quot;); - 使用泛型时，完全可以将泛型当成是一个普通的类去使用 类中同样可以使用泛型： class MyClass&lt;T&gt;&#123; prop: T; constructor(prop: T)&#123; this.prop = prop; &#125; &#125; 12345678910111213- 除此之外，也可以对泛型的范围进行约束 接口可以进行限制，，进而可以应用到泛型中 - ```typescript interface MyInter&#123; length: number; &#125; function test&lt;T extends MyInter&gt;(arg: T): number&#123; return arg.length; &#125; 使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用。 项目：贪吃蛇","tags":["typescript"],"categories":["typescript"]},{"title":"风起了","path":"/2024/05/03/2024-5-3/","content":"风起了封面图 ​\t昨天晚上论文实在是写不下去了，就打算找了一部电影看。 ​\t我在动漫一栏中搜索时偶然间点中了这部电影的封面，于是自动播放起了该电影的部分片段。这一片段播放的是一个日本青年造飞机的故事，很感兴趣，于是就点进去看了，一直看到凌晨将近1点。 内容 ​\t电影具体的内容是二战日本零式战机的设计者崛越二郎的生平。从小对飞机有着浓厚的兴趣，但是由于身体上的缺陷，无法成为飞行员，在心中的那位伟大的飞机设计师的鼓舞下，立志要成为一名能够创造出新式战机的设计师。 ​\t后续的内容就是崛越在三菱公司设计飞机和游学时的故事，同时在游学时偶然间碰到了早期帮助过的女主。但是女主遗传了其母亲的肺结核，所剩时日不多，于是从疗养院独自前方崛越的工作处。 女主 男主 最终结局，哎，还是悲剧😢","categories":["电影"]},{"title":"codepen test","path":"/2024/03/03/2024-3-3/","content":"使用https://codepen.io/在线体验代码 See the Pen hello world by kittates (@kittates) on CodePen.","tags":["code"]},{"title":"this指向","path":"/2024/02/08/2024-2-8/","content":"先看两段代码，分析各自的输出结果 12345678910name = &quot;Jerry&quot;;var object = &#123; name: &quot;Tom&quot;, getFunc: function() &#123; return function() &#123; console.log(this.name); &#125; &#125;&#125;object.getFunc()(); 1234567891011name = &quot;Jerry&quot;;var object = &#123; name: &quot;Tom&quot;, getFunc: function() &#123; let that = this; return function() &#123; console.log(that.name); &#125; &#125;&#125;object.getFunc()(); 结果： 第一个输出Jerry，第二个输出Tom 这类问题可以简化为this的指向: 123456789var object = &#123; getFunc: function() &#123; console.log(&quot;@1&quot;,this) return function() &#123; console.log(&quot;@2&quot;,this); &#125; &#125;&#125;object.getFunc()(); 当调用object.getFunc()时，由于getNameFunc 是一个方法，当它被调用时，它的执行上下文（this）会绑定到对象 object,此时的@1处的this指向的是object。但在该方法内部，它返回了另一个函数，我们假设令该返回的函数名为f1，object.getFunc()执行后，再执行f1() ， 由于该函数是在全局作用域下调用并执行的，所以@2处this指向window。 在上面最初的第二段代码中，用that保存了object中的this，所以在执行完后输出的是object中的name，也就是Tom；反观第一段代码，return出去的函数是在全局条件下调用执行的，所以this指向的是window，输出的也是window下的name，也就是Jerry了。","tags":["this"],"categories":["javascript"]},{"title":"小学","path":"/2024/02/05/2024-2-5/","content":"10d79030e8222445804370796b90fca1c3a749c59a0f585838d23806ac11ee2076831055f9ec42335f85ebb628d34bffc14586d517393746fcb143c00eab5935d8b7f162b7ac4b0c27623f3054fcf917a63f8fbe2f57c6f9ad729d3f1e93aaca2c1bc9501a2d0143970fe3616b73425d22902c056d1a2c37f6d29f78f72176a421c452065c321934b2c7971b0ef90260fb7894d54cda22c3085879114876a8961facca8872d1bbaf2af27dc3211faf29914882402487d1bdea36f5224f715c176724e2b5780a7854ac4976875cd7579ae2d9faa794f0d956cef9f503c4e1ccfa4e085107045629f1998f98ce56d64454f339a138774e9c0539657af5ae0d0eeb678ff4d28dbbebda328738e747ad59a9a51146e98f28ca9431febd9c92ed14094a1c77c930e705317622264670276217ac0245dc53997af1b6c04f30c1d1693a858f3cfc441a7dbda43939fa9f0f3ef79c6a331f093612b4c64fa5841220b62ca19c2d5bfaef55edf37e36788d0aa73ff4b26aa579003a2634409b10debc86b69ca4188a0b3ed142f1741329329c9a5708061b62d8a014da7723d78b08194d95b520e3cf536157205808d8f73ddcea9475c05201222ae29ccb5b69ba07679aca509365fe8d960178e663b33c80f157a05a48b76f77f4bee43979ffd0145a1bda148aa1a7407542c878c13917486dd46fd3cb1e391dbe049aa270a12726408820fae9ccdd3b0956cb6264c9e0cf7bbb8b2987fc22b2c7de93df402de5cada2537538f86a2379f2db12a92ea8df102399551ff3f82739d03d65c3b295c310f59acdcc00207f99267f284e05a156db303199893d95f6419b25265430fe71754544c81a6c363814d5a14b5445d4b47ed6cec 请输入密码查看.","categories":["diary"]},{"title":"鼠鼠！","path":"/2024/02/01/2024-2-1/","content":"😱","categories":["diary"]},{"title":"git push,Time out?","path":"/2024/01/05/2024-1-5/","content":"今天也是像往常一样要往github push，但是push了好几次有time out了，之前也曾出现过几次，经过一顿搜索查询后才知道，我不知道什么时候设置了git全局代理。 关闭代理 12git config --global --unset http.proxygit config --global --unset https.proxy","tags":["git"],"categories":["git"]},{"title":"引用名正则替换","path":"/2024/01/03/2024-1-3/","content":"12345678910111213141516171819202122232425262728const fs = require(&#x27;fs&#x27;);// 读取Markdown文件的内容fs.readFile(&#x27;./408/操作系统.md&#x27;, &#x27;utf8&#x27;, (err, data) =&gt; &#123; if (err) &#123; console.error(err); return; &#125; // 定义替换图片标记的正则表达式模式 const pattern = /\\!\\[image\\-(\\d+)\\]\\([^)]+\\)/g; // 替换匹配的图片标记 const replacedContent = data.replace(pattern, (match, p1) =&gt; &#123; const imageTag = `&lt;img src=&quot;操作系统.assets/image-$&#123;p1&#125;.png&quot; alt=&quot;image-$&#123;p1&#125;&quot; style=&quot;zoom:33%;&quot;&gt;`; return imageTag; &#125;); // 将替换后的内容写回文件 fs.writeFile(&#x27;your_操作系统.md&#x27;, replacedContent, &#x27;utf8&#x27;, err =&gt; &#123; if (err) &#123; console.error(err); &#125; else &#123; console.log(&#x27;图片标记替换完成！&#x27;); &#125; &#125;);&#125;);","tags":["node"],"categories":["node"]},{"title":"马上就要上考场了","path":"/2023/12/20/2023-12-20/","content":"怎么形容我现在的状态呢？想学，但是又有点急躁，只能尽量的去压制着，谨慎着去控制，尽可能在这一坤天的时间内将页面调入内存。😢"},{"title":"2013英二小短文","path":"/2023/09/22/2023-9-22/","content":"​ I can pick a date from the past 53 years and know instantly where I was, what happened in the news and even the day of the week. I’ve been able to do this since I was four. ​\tI never feel overwhelmed with the amount of information my brain absorbs. My mind seems to be able to cope and the information is stored wasy neatly. When I think of a sad memory, I do what everyone does——try to put it to one side. I don’t think it’s harder for me just became my memory is clearer. Powerful memory doesn’t make my emotions any more acute or vived. I can recall the day my grandfather died and the sadness I felt when we went to the hospital the day before. I also remember that musical play Hair opened on the Broadway on the same day——they both just pop into my mind in the same way. 更像是一种对自我的评价。","categories":["blog"]},{"title":"假期回忆","path":"/2023/08/27/2023-8-27/","content":"​ 8月24号下午16:11，老头突然上来说明后两天有考试，要占用教室，让我们把所有的书本等物品带走。 ​\t就这样，暑假也在老头的这声吆喝声中悄无声息地接近了尾声。 ​\t25 、26号这两天在图书馆度过的，期间伴随着天不停地哗啦啦的下雨。今天是27号，明天要去实习，下午将书带到了公教楼，准备洗个澡去，回来在公教楼继续学。 ​\t地点仍是在306，只不过当初的那批人现在只剩下了三个还在这个教室学习，也包括我在内，其余的都是一些新面孔了。 ​\t暑假期间也没有拍过多的图片，只是拍了两张空教室的，没有带着人一起拍。 ​\t虽说在同一教室学习了仅仅两个月左右，感觉让是有一种物是人非，人走离散的feeling。 ​\t留作一个纪念吧，所说在图书馆可能还会碰面，但这种情况也是少之又少的😞","categories":["diary"]},{"title":"愚","path":"/2023/08/23/2023-8-23/","content":"10d79030e8222445804370796b90fca1331cc27949fc41078acd1c35d52ceccb24608f63df5a436244f13e61d0da99d1aa9e16b7153725c7250f1d61a5ff01e7463bd3126ad107db65b0b0d46757569c305b40bfdc4598f4c27f97249026e44f72bf2e4836e6c3a2084a433d252fcb04cfae355a9bf770d322e0afb7210c8b17468790ee51ede0581cbec7fdbefe4e51ab2c617516d6ca517ab4a3fbd0acfb27db42c388d4350671ae7b78eac1ec72b4f57d06090a549269bc279a123600cf271e4dd25920e2f2c4178c121e432ebaec5a197aad4a51c2148731fd59c78f2a3f33e2a6041a66b46e717987a4b88a27b4317815bfd7c356f188ae0031c93119ada5fbef625d162ef2db0c7394ee4b498648a218d4880979c0b19f78e0407d50768993592d580f0d29fdc0ca6d5d6a6c9d4254a6f51767eb50a56f57b60c9a2dba64ba0a9760549ca14832eb7e5e4a44ddf9834376346ae9044f24f952c372ddb719fddf230abfc762ef7bb2a50186fb096e9d161bd909fdac3d7d398ff5c9554811a25308878c48a9317b6b0a3969aef3ed0322d25de2f9ad22ca3c97f34f46b950c1d356e2645dc101a0c7a9f63fe04222f698dfa7a0121bfec9c60f0a5ca370d5808f8ee0b0a7dcbdb7afe9709eff5909c2019657e19d0bf48c7c1586836b1112527dc2e4cd93afdedef4e0cd91103d702a7cb724c4a7aa876812639d3372d1f8d95872421ff754b162763f625e0cbb6a12402b23a905f649fcdecfb1ce68193e518cf92edb35ff046ebffe029932bc32080fc1cc425a251f3896e4cb1fc3f76003fab9c27df87f4e7d13fe5da80863e643bfddbd15905be78b81350236ac3801ac3268e54f633647b362c54209b1bf3531056dafcc5a8b307ba6bf01064237a980ee629e664883852a08705cb8f9c6a3746aa6e80bff6f08bbd1481f0675014628ac7aec574aa8cf3d2ee4b224fc20e25a30e1acb0d27a4e7d91c4fd3cff95831cfff7c95fd9298acb045e322e9d2949f820d1cd2187caed2bfb575ea7cd5d43cdc810f2810edf56e0b33dbd32e4e5bfb11b6edf82e090dd6712bc81fe97486e476bf324aa8b6369de62c673ef58055a66045847b60d001e40dfd739da82ce4dd69e6171778a644fcadc66b65b717a092fd6b7cca31377f50784d3ad99b9d04899178dbe52c30b762f9a27c779aaa77277adaae8640bb721db051b5f4690290e9a4b15ee225b16faa1a15d4d8eba09876251c902e742f99d87481a5e36a9d812564e8a5d2474b36af314b7db24fb224869757a8b293fdc8f6f0899d1ac13c828d6a13359b67ff41a9b00fc5835beba152e9a08d3ec76cb875d23e4ec188fdf31a39a7df85d4331e431c2eea07b65ceaf38974ead0b3f68bfaf8192b86f36a53ec310a2cf70d11add5927a3a02f2fe0a867b63c6a9e9cf83babf857e00d6544abcb7ceeab24eb8e8d3795d8ae17bd2b2d4964b30fd4585de613ea8826bfeeb6660b794cdebc396afe876c8901832232683ef3ed5f21d90870d7c34fe98ba3a01d6d67c664ba415f753376eb656eddba3c0eeb920eb8423c2d4cdc6a64cb2c412b6672b81d771b932b9d21b9d03053850d59bc32ef17e2b2a8e5fb97a2d14a38402ee7c1848e2ad63122c4c7b44e1b7aea4d6adad159136b7d777d66d1f93f35c67e937734546db40269e4323ac3bde448d5ac24367cff69d71668e104a847def4e1e726b718242ec6f663f67aa4d1700c8455aa80d5e70e6116ff453a51afb7d351254273974d85340c4cb2151864c97a5ee08ed21c01dec450107f0e1da0f73f78f295598375b258f2a161f238e7f9d911d35dec434f07b8866808e176d6e2fe5577203b4255326819ca84bd5eeb82283d7e778c0fea2f842c73e19be8fd0262c6a90b35cbc48f8a966878d60edda57aa4e9ef2fbd30f580fd042d5e332f059bcbb5d8263bb689aed5a41e2ef711bc8fcc84470619aa31afa44ee00e64a9562b4ffa16847371d2a82436ee5bcf172c4afb988e26ccd43af51298244429a0c41ec2e5a040caa854088499ff2aa1fa2ec14ca774ee0eeb5aa6f3e772d8f394b3612ddd6794db8162c9b891c665a6144067cc6a52f82c1b5ff9ab9ce4fda03a162be6cc8663a7536f7d15d38215a1561b08301b8bf7949e142a6726b0986feb16301265644d373b6cf84585985417e4702646fc71116c41a9c7596f34233c65b4203f0bde336f7655c383c75abb4d70a17ff93161724aa2d72b33ab83475186b91f35a0e604a353cd36d191e44dc2639c 请输入密码查看.","categories":["diary"]},{"title":"完型又TM做破防了~","path":"/2023/07/27/2023-7-27/","content":"nnd,今天晚上认认真真地做了07年的完型，结果TM错了13个，哎，瞬间感觉这英语真的是**。😢","tags":["English"],"categories":["English"]},{"title":"破防~","path":"/2023/07/17/2023-7-17/","content":"​ 这垃圾英语阅读，给哥们我做破防了，原文就这样写着了是don’t have time，而且后面还重复了there time for…，TM答案就是硬给我幻想着推导出一个结论答案，我踏马😄呵呵了。 ​ 04~09年的做完了，总共24篇，总体情况不容乐观，还有待提升和加强，英语语句的流畅度还有待进一步提高，还是太慢了，照这样的速度，3个小时除去作文也就勉勉强强能做完。 ​ TM太气人了，测，想想犯的错误就blast。","tags":["English"],"categories":["English"]},{"title":"QQ找回--一些回念","path":"/2023/07/09/2023-7-9/","content":"​ 今天下午休息的时候回想起来上六、七年级时使用的QQ号（距离现在也有9年多了），当时忘记了密码，又重新申请了一个新的，也就是如今所使用的。现在想找回密码重新登陆一下，那个号上面有着值得两位怀念的亲人。 ​ 成功找回了。看了看他上一次的动态还是在15年，那时他还没有出事，如果正常发展的话，也就不会有后面一连串的连锁的烂事了。想想距今也将近9年了啊。权当是一个念想、回忆吧，仅在我的前十五年里出现过，","tags":["diary"],"categories":["diary"]},{"title":"学 or 摆 ?","path":"/2023/06/30/2023-6-30/","content":"MD，学学学😠，奋斗起来此时🏃，不学何时学💦，待到明年春暖花开时学？否否否👍 拒绝开摆✋，only one word，that’s: ​ 👇 ​ 👉 学 👈 ​ 👆 想开摆 ？🖕","tags":["diary"],"categories":["diary"]},{"title":"week summary","path":"/2023/05/18/2023-5-18/","content":"​ 计划OS和计算机网络在六月底结束，也就是说用一个月零几天的时间来快速的过一遍，这期间还会有考试和六级，但不得不紧张起来了，前面的数据结构和计组耗费了太多的时间了，尤其是做计组的那些大题，也不能这么太绝对，现在看了大题之后再去学习的话是有思路的。","categories":["diary"]},{"title":"emotional damage","path":"/2023/05/09/2023-5-9/","content":"​\t测，今天晚上做计组的真题大题给我做破防了，真是测了啊。 ​\tTM的这都五月份了，计组还有两章没看，DS也忘了，OS和NW还没开，真是大测特测啊，这TM还能复习的完吗。还TM要期末考试，考尼玛呢考，测了算了。 ​\t测，以后节约时间，中午下午不往宿舍回了，真TM浪费时间。一天就TM学那点时间，真正高效的时间占比又TM那么少，效率那么低，测了啊。我TM要在七月底完成所有的复习：math、408、English reading。测了，忘了还有TM的政治，呃呃啊啊啊，测测测。 ​\t哎，复习了这么长时间，第一次emotional damage。 不说了，继续做题去了。 😭 😭 😭","categories":["diary"]},{"title":"感慨","path":"/2023/05/08/2023-5-8/","content":"​\t今天在二教平阶406的后门墙角处看到了这样的一张便利贴 似乎是上年考研的时候他们留下的。那时候我也在教室的，在三楼。当时人挺多的，图书馆暂时关闭了。 今天看了一段视频，感慨了一番。是时候冲刺拼搏了，到别的地方拼搏。","categories":["diary"]},{"title":"测试0v7670摄像头","path":"/2023/04/28/2023-4-28/","content":"¶测试出来的图片似乎失真了？ ​\t今天晚上熬大夜来测试arduino uno与0v7670之间的数据通信。在网上找了很多资料用来参考。结果在运行后发现传输出来的图片是下面这样儿的： 这两张图片看起来有点糊啊，暂时不知道是什么问题造成的。 一下内容是2023.4.28 22:50时 补充的内容 今天正好是五一假期的前一天，所以我决定暂时休息一晚上，用来调试昨天晚上还没有完成的ov7670。 又经过一番Google，调整这个参数（可以为9、10、11、13）能够在一定程度上将清晰的画面传入到机器中 1writeReg(0x11, 9); 总体来说是能够看到画面了，但是还是有一点糊 ，再就是数据传输的延迟比较大。 以后再找时间调整调整。","categories":["circuit"]},{"title":"一切由人类设计的事物，都不要去解释，而是要去共情！","path":"/2023/04/22/cs/","content":"前几天，包括这几天在学习计算机组成原理这门课中的数据运算时，总会感觉到有些迷茫：它到底为什么要这样设计，这样设计的原因是什么。当我在搜索某个问题的时候，我在知乎上面看到了这样一句： 一切由人类设计的事物，都不要去解释，而是要去共情！ 😭😪","categories":["blog"]},{"title":"栈的应用-括号匹配","path":"/2023/02/24/栈的应用-括号匹配/","content":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;iostream&gt;using namespace std;#define MaxSize 20typedef struct &#123; char data[MaxSize]; int top;&#125;SqStack;bool initStack(SqStack &amp;s)&#123; s.top = -1;&#125;bool push(SqStack &amp;s,char e)&#123; if(s.top==MaxSize-1) return false; s.data[++s.top] = e; return true;&#125;bool pop(SqStack &amp;s,char &amp;e)&#123; if(s.top == -1) return false; e = s.data[s.top--]; return true;&#125;bool Empty(SqStack s)&#123; if(s.top == -1) return true; else return false;&#125;bool brackCheck(char str[],int length)&#123; SqStack s; if(initStack(s)) cout&lt;&lt;&quot;initStack yes &quot;; else &#123; cout&lt;&lt;&quot;initStack error &quot;; return false; &#125; for(int i=0;i&lt;length;i++)&#123; if(str[i]==&#x27;(&#x27; || str[i]==&#x27;&#123;&#x27; || str[i]==&#x27;[&#x27;) &#123; push(s,str[i]); &#125; else &#123; // if(Empty(s)) return false; char topELem; if(!pop(s,topELem)) return false; if(str[i]==&#x27;)&#x27; &amp;&amp; topELem!=&#x27;(&#x27;) return false; if(str[i]==&#x27;&#125;&#x27; &amp;&amp; topELem!=&#x27;&#123;&#x27;) return false; if(str[i]==&#x27;]&#x27; &amp;&amp; topELem!=&#x27;[&#x27;) return false; &#125; &#125; return Empty(s);&#125;int main()&#123; char syntan[] = &#123;&#x27;(&#x27;,&#x27;(&#x27;,&#x27;[&#x27;,&#x27;[&#x27;,&#x27;]&#x27;,&#x27;]&#x27;,&#x27;)&#x27;,&#x27;)&#x27;&#125;; int length = 8; if(brackCheck(syntan,length)) cout&lt;&lt;&quot;correct &quot;; else cout&lt;&lt;&quot;not correct &quot;; return 0;&#125;","tags":["DS"],"categories":["DS"]},{"title":"清灰","path":"/2023/02/13/清灰/","content":"​\t电脑开机一会儿散热扇就嗡嗡的转，今天趁着有空，给它清清灰。 ​\t打开一看，出风口都塞满了快，散热扇叶也都被灰裹着。 几天前看family guy的时候，发现Brian模仿了下面一段视频，很有魔性 Brian模仿 Stewie模仿","categories":["diary"]},{"title":"行内块元素缝隙问题","path":"/2023/01/20/行内块元素缝隙问题/","content":"今天重新学习css的过程中发现了一个小问题，如下： 行内块元素之间有一个小缝隙，原本以为是div自带margin，通过margin:0清除后发现缝隙仍在，想到用浮动来消除，果然可以。但是为什么有这个东西呢？ Google之后发现这是有标签之间的空格、换行等其他造成的，如果换成下面这样，页面就会在一行上面显示 其它的解决方法: 为父容器设置font-size: 0;这是为了让其内部文字消失 参考： 参考1 参考2 这一次的学习中又发现了往前未察觉到的问题，果然还得继续学👨‍🎓","tags":["css"],"categories":["css"]},{"title":"Sun Jan 15 2023 17:59:42 GMT+0800 (中国标准时间)","path":"/2023/01/15/2023-1-15/","content":"10d79030e8222445804370796b90fca1331cc27949fc41078acd1c35d52ceccb01e757594830f72e2cd32c0bb5009397f60225258c1f58df335a501bf4d7b185f7fb526045343f007808603aa681e50b716401abb288dd8e606af1f8c3f6c047495118c29855caa56862b27cc9aa5a232219ea9469f883662fd58cb948f6f2f033fdb9f6ae1f54c05b58dbc69390bbea0b330c2d91e82c709ac7c2c482857745e3cfd28b7e8210ab83f97ea66f84be3f48ced8773a475b2312483cc33965140a2b74d7bc31cba05e155c4007d0ae8f5026404d0df17ccdc494dc397d420ac36d96eaaf8e8ee475386898960d840d388582fccd046682f43dce4dd9162a2dd5f4 请输入密码查看.","categories":["diary"]},{"title":"Tue Dec 20 2022 19:36:43 GMT+0800 (中国标准时间)","path":"/2022/12/20/2022-12-20/","content":"​\t16号从学校回的家，17号在老家做核酸时发现14号在学校做的核酸结果还没出，感觉大事不妙。 ​\t果不其然，17号晚上嗓子就有点紧，我赶紧吃了片阿莫西林，晚上睡觉的时候感觉轻松了些。第二天也就是18号早上起来发现更紧了，早上吃饭的时候还好好的，身体没发现什么异常。18号上午11:35左右想在床上面躺躺，身体就突然冷了起来，不停的打寒颤。一开始我就以为是普通的感冒。随后身体是越来越不行了，这种冷的感觉一直持续了很长一段时间，之后身体就热起来了，四肢乏力，头也疼（但不是疼的最厉害的那种）。家里人就猜着是不是感染了。下午饭吃的藕，也就吃了那几口吧，当时那种状态真的吃不下东西，放到现在的我早就给他吃完了。下午3:35左右，来电话了，说是混管阳了。之后就一直躺在床上，难受、头疼，浑身乏力。晚上5点多，头疼的更厉害了：心脏泵血，太阳穴的血管就蹭蹭往外膨胀，感觉脑袋要炸了一样，想闭上眼睡过去，但是疼的直接睡不着，下午7:30左右，头疼的我都把下午吃的那几口饭给吐出来了。体温一直很高，晚上测了一次是39.8°C差一点就到40了。晚上吃了半片脑清片才迷迷糊糊的睡过去，睡得时候脑子里面很乱：感觉脑袋里面放了很多要干的事，而且还只能一个一个的做，打算挑一个吧还毫无头绪，一整晚就是这种状态。 ​\t19号上午打算去做个单管核酸。早饭喝了几勺子小米饭，吃了半个鸡蛋，把连花清瘟吃了就走了，那味儿太难闻了，胃里面咕咕叫。饭是一点都吃不下去。回来之后还是一直在床上面躺着，头还是很疼，但没有昨天晚上那样疼了。下午状态好了些，但是体温还是在38°C以上。晚上8点多核酸出来了：阳性，爸妈都是阴性。此时感觉状态好多了，就是嗓子还是有点紧紧地，晚上睡觉最里面发苦。 ​\t20号除了嗓子紧紧地不大舒服，其它的都正常了。算了算总共耗时1天半，感染这东西很难受。 ​\t我是怎么感染上了？ 在学校感染的（很大的概率），14号在学校测得核酸，17号还没出来，学校大概看我16号回了家，他就不再负核酸的责了吧，也就没再通知我混管阳这件事。在学校的时间大部分都在宿舍，只有在买饭的时候采取食堂，期间也都是带着口罩的，即便是手上接触了，我每次回宿舍也都用舒肤佳搓一遍，不应该会被感染啊。或许是在15号晚上送我舍友的时候在车子上感染的？ 在车站或者是路上感染的（也有可能），当时只带了口罩，没戴手套。客车是那种小型的，但都坐满了人。车内空间相对小，呼出来的气有可能被其他人吸进去了，间接的造成了感染。 春季开学的时候感觉又会有一大批人被感染，说不准，也不一定。","categories":["diary"]},{"title":"Sun Nov 27 2022 00:52:22 GMT+0800 (中国标准时间)","path":"/2022/11/27/2022-11-27/","content":"​\t已经有好长时间没有更新了，最近事太多了。 ​\t原本周四周五的考试，被这这突如其来的疫情延期了。 ​\t从这周开始，疫情渐渐又兴起，恰当时有个教职工在家隔离确诊了。学校开始了这一段时期的线上课程。相关的考试相继延期到后期（具体什么时候根据现况而定），不光只有这些：还有不见头的每日核酸一检；图书馆暂停开放，考研生只能转战到公教楼学习。考研倒计时一个月。又过了几天，食堂不能堂食了，这对我们这些离宿舍近的人来说没有多大事，但是对那考研生来说添加了不少麻烦，有的在路边的石凳上面吃、在楼道台阶上吃，总之来说：对我们这些还不到考研的人来说是没多大影响的，但是对那些考研生来说，这疫情真恶心。食堂的某些店还趁着这个时候强买强卖：哥们我晚上买的米线给我加上了一块钱的塑料碗，以前都是问你要不要，现在这段时间直接不问，默认加一块钱把碗强卖给你。😄 ​\t今天上计组的时候，老师说下周还要继续线上。那这考试又不知道要延迟到何时。未来不可期啊。 ​\t临近结束，得加油了。 ​ ​","categories":["diary"]},{"title":"Mon Nov 07 2022 23:22:51 GMT+0800 (中国标准时间)","path":"/2022/11/07/2022-11-7/","content":"​\t今天总结一下，感觉很好，该完成的任务都完成了。 ​\t今天早上第一节有课，忘记了有没有吃饭，应该是吃了吧。其余的时间没课了，大部分都是在上自习学习。 ​\t今天还是主要以英语为主，OS、Javaweb为辅。 ​\t英语把前天做的卷子的生词整理了下，很多大约整理了三页多。单词书记了半页，不急慢慢来吧，总共还剩下不到几页了，距离六级还有一个多月的时间，再加上复习下之前的单词，足够了。下午做了篇选词填空，错了4个，分析了下主要是生词不认识导致的。还有昨天下午做的：长阅读，错了4个，纯粹是理解错了；第一篇仔细阅读：1个，真不该错!!!；第二篇仔细阅读：3个，就他妈理解错了；总体来说还算可以，这才做了两套。阅读的流畅性不是问题，再做几套找找语感。单词还是再坚持记得：新的、旧的一起记忆。听力不求高分，但求150即可。六级能过500嘛❓,尝试尝试，万一过了呢😲,只是万一啊 ​\tJavaweb把课本上的内容过了遍，要是让我手写代码，简单的还可以，难的我就测它的🐴。后面几天再看看发的例题库（真尼玛多）。 ​\tOS才看到线程，还有好多要看的，还有两周多就要考试了，拼一拼。 ​ 总之一句话：看了不代表会了。 ​\t刚刚在小红书上面找到了六级作文模板，看我不使劲的背。 ​\t云班课测试题还没写，run了去写云班课了😭","categories":["diary"]},{"title":"tcp Chat(poor version)","path":"/2022/11/04/tcp Chat(poor version)/","content":"今天晚上闲来无事(实际上是上人工智能实验课做的这件事)，找到了上计算机网络时写的有关tcp的代码，再来回顾一下。 这是一个很poor的版本，客户端的信息如果超过屏幕的高度，就会被隐藏 事实上，我也懒得挤时间去修改这个大Bug了，还有去添加发送图片、文件的功能了 从所周知，tcp协议广泛应用于我们身边。协议的接受就不再说了（三次握手四次挥手嘛😁我也忘得差不多了） 服务端要先运行，否则客户端怎么能够连接到请求的主机呢。 start host clients connect client exit the dialog page ​ server’s info when client exit 以后找个时间修改修改bugs😄。 ¶server.py 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475import socketimport threadingnum = 0def chat(connectionSocket, addr): global num # 新加进来的用户不在user元组中，就要向其他用户通告该用户进入进入连接的提示 if not addr in user: print(&#x27;new connection from %s:%s...&#x27; % addr) # 向其他用户通告新用户的加入 for scs in serv_clie_socket: serv_clie_socket[scs].send(data + &quot; enter the room&quot;.encode(&#x27;utf-8&#x27;)) # 将用户的IP+port对应的username加入到user中 user[addr] = data.decode(&#x27;utf-8&#x27;) # 将用户的套接字加入到ser_clie_socket中 serv_clie_socket[addr] = connectionSocket else: print(&#x27;%s:%s already in the room&#x27; % addr) while True: d = connectionSocket.recv(1024) # 包含exit关键词退出 if ((&#x27;exit&#x27; in d.decode(&#x27;utf-8&#x27;)) | (&#x27;break the link&#x27; in d.decode(&#x27;utf-8&#x27;))): name = user[addr] user.pop(addr) serv_clie_socket.pop(addr) # 向其他用户通告某一用户的离开 for scs in serv_clie_socket: serv_clie_socket[scs].send((name + &quot; left the room&quot;).encode(&#x27;utf-8&#x27;)) print(&#x27;Connection from %s:%s closed.&#x27; % addr) num = num - 1 # 结束该线程 print(&quot;The current number of people is &quot; + str(num)) break # 展示信息 else: print(&#x27;%s:%s= &quot;%s&quot;&#x27; % (addr[0], addr[1],d.decode(&#x27;utf-8&#x27;) )) # 向其他用户通告接受的该条信息 for scs in serv_clie_socket: if serv_clie_socket[scs] != connectionSocket: serv_clie_socket[scs].send(d)# 创建一个欢迎套接字s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)addr = (&#x27;127.0.0.1&#x27;, 12000)s.bind((&#x27;&#x27;,12000))# 监听用户的请求连接，设为128个请求s.listen(128)print(&#x27;server on&#x27;, addr[0], &quot;:&quot;, addr[1])# 存放请求用户的(IP+端口号:用户名)的键值对user = &#123;&#125;# 存放不同用户的socketserv_clie_socket = &#123;&#125;while True: try: print(&quot;Waiting for request from client:&quot;) connectionSocket, addr = s.accept() print(&quot;received request from client&quot;) except ConnectionResetError: print(&quot;error&quot;) # 从client接受到的用户名 data = connectionSocket.recv(1024) print(&quot;user: &quot;, data.decode()) # 创建线程 守护线程 r = threading.Thread(target=chat, args=(connectionSocket, addr), daemon=True) r.start() num = num + 1 print(&quot;The current number of people is &quot;, num) ¶client.py 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121# 使用者端import tkinterfrom tkinter import fontimport tkinter.messageboximport socketimport threadingimport timestring = &#x27;&#x27;def Send(sock): if string != &#x27;&#x27;: message = name + &#x27; : &#x27; + string sock.send(message.encode(&#x27;utf-8&#x27;)) if &#x27;exit&#x27; in string.lower(): exit(0)def recv(sock): sock.send(name.encode(&#x27;utf-8&#x27;)) while True: data = sock.recv(1024) # 获取其他用户信息的时间 time_tuple = time.localtime(time.time()) str = (&quot;&#123;&#125;-&#123;&#125;-&#123;&#125; &#123;&#125;:&#123;&#125;:&#123;&#125;&quot;.format(time_tuple[0],time_tuple[1],time_tuple[2],time_tuple[3], time_tuple[4],time_tuple[5])) time_recv = tkinter.Label(t,text=str,width=40,anchor=&#x27;w&#x27;) time_recv.pack() if &quot;enter the room&quot; in data.decode(&#x27;utf-8&#x27;): rrecv = tkinter.Label(t, text=data.decode(&#x27;utf-8&#x27;), width=40, anchor=&#x27;w&#x27;,bg=&#x27;powderblue&#x27;) elif &quot;left the room&quot; in data.decode(&#x27;utf-8&#x27;): rrecv = tkinter.Label(t, text=data.decode(&#x27;utf-8&#x27;), width=40, anchor=&#x27;w&#x27;, bg=&#x27;pink&#x27;) else: rrecv = tkinter.Label(t, text=data.decode(&#x27;utf-8&#x27;), width=40, anchor=&#x27;w&#x27;) rrecv.pack()# def getOnline():# tmp = socket.recv(1024)# data1 = tmp.d# if &quot;%&#x27;online is&#x27;%&quot; in data1:# num = []# num = data1.dpdef left(): global string # 得到文本框中的内容 string = rv1.get() # 发送信息 Send(s) if string != &#x27;&#x27;: time_tuple = time.localtime(time.time()) str = (&quot;&#123;&#125;-&#123;&#125;-&#123;&#125; &#123;&#125;:&#123;&#125;:&#123;&#125;&quot;.format(time_tuple[0],time_tuple[1],time_tuple[2],time_tuple[3], time_tuple[4],time_tuple[5])) # 发送时间 time_send = tkinter.Label(t,text=str,width=40,anchor=&#x27;e&#x27;) time_send.pack() # 发送信息 rleft = tkinter.Label(t, text=string, width=40, anchor=&#x27;e&#x27;) rleft.pack() rv1.set(&#x27;&#x27;)def Creat(): global name name = n.get() # 开启一个接收信息线程 tr = threading.Thread(target=recv, args=(s,), daemon=True) tr.start() # 销毁之前的窗口 l.destroy() e.destroy() b.destroy() # 创建主对话窗口 t.title(&quot;chatroom&quot;) t.geometry(&quot;400x500&quot;) rL0 = tkinter.Label(t, text=&#x27;%s&#x27; % name, width=40) rL0.pack() rE1 = tkinter.Entry(t, textvariable=rv1,width=40) rE1.place(x=1, y=450) # 200 450 rB1 = tkinter.Button(t, text=&quot;send&quot;, width=7, height=1, command=left) rB1.place(x=320, y=450)def close_chat(): # 点击窗口退出时，增加提示页面 tkinter.messagebox.showwarning(title=&#x27;exit&#x27;, message=&#x27;exit?&#x27;) # 向服务器发送退出信息 s.send(&quot;break the link&quot;.encode(&#x27;utf-8&#x27;)) exit(0)# 创建一个客户端socket,让操作系统分配ports = socket.socket(socket.AF_INET, socket.SOCK_STREAM)server = (&#x27;127.0.0.1&#x27;, 12000)s.connect(server) # 建立连接t = tkinter.Tk()t.title(&quot;chat&quot;)t.geometry(&quot;300x270+500+200&quot;)l = tkinter.Label(t, text=&#x27;please input your nickname&#x27;, width=40, height=10,font=(&#x27;黑体&#x27;,15,&#x27;&#x27;))l.pack()n = tkinter.StringVar()e = tkinter.Entry(t, width=20, textvariable=n,font=(&#x27;黑体&#x27;,15,&#x27;&#x27;))e.pack()rv1 = tkinter.StringVar()# 获取用户名name = n.get()b = tkinter.Button(t, text=&quot;login&quot;, width=30, height=40, command=Creat)b.pack()# 添加协议处理程序机制，点击退出按钮时，弹窗提示t.protocol(&quot;WM_DELETE_WINDOW&quot;, close_chat)t.mainloop()s.close()","tags":["tcp"],"categories":["tcp"]},{"title":"Thu Oct 27 2022 23:32:54 GMT+0800 (中国标准时间)","path":"/2022/10/27/2022-10-27/","content":"​\t今天总体感觉不太行，效率有点低。 ​\t今天上午第一节是计组，还是和往常一样洗漱吃面包🍞，50多出的门，提前去记几个单词。 ​\t到教室后发现已经有好几个人在那了，比我来的还早，服了。 ​\t计组前一天晚上预学了一会儿，所以学的还算很简单。 ​\t第二节没有课，但是得利用这段时间去测码。人不多，很快就做完了。 ​\t做完核酸在二楼吃了自选菜，花了我18块多😭。 ​\t中午回宿舍，本想下午第一节的计组实验课不去了，想run。但是上午上实验的那两个班点名了，也只好不得不去了。困得一批。 ​\t吕国华的软件工程也是一如既往的摆。还是摆点好啊！！！ ​\t晚上吃的肉酱面，就是豆干切成的小块，哪里有什么肉酱，就TM是一坨💩. ​\t晚上6.10多去上的自习。你妈找个空教室真TM难，不是有在上课的，就是大一的崽子们在上晚自习的，还他们上晚自习的位置不固定。最后爬到平阶五楼才找到了个位置。 ​\t晚上学习的这段时间效率不太高。对软件项目管理就是😵 😪的状态。后面的人工智能和软件工程考试可怎么办啊😩. ​\t不会真的要寄了吧，鼠鼠不想寄啊。 ​\t想玩玩Steam新出的Chicken Feet，不好，我怎么露出了鸡脚，我可是ikun啊。 ​\t奈何游侠没有资源，等等吧。","categories":["diary"]},{"title":"Wed Oct 26 2022 23:18:46 GMT+0800 (中国标准时间)","path":"/2022/10/26/2022-10-26/","content":"整体来说今天的体验还算可以。😐 ​\t今天定了7：30的闹钟，拖了5分钟才起来。了了的洗漱了一下，吃了半个面包🍞，就去教室上自习去了。 第二节上Javaweb，第一节还是挺自由的。 ​\t原本想在平阶找个教室学一会儿，奈何都有课，只能转战战场去阶梯。TMD阶梯三层也有上课的，最后去了第二节上课的教室。 ​\t第一节课的空闲时间记了些单词（半页吧），学了些软件项目管理的题，下周一考试😱，再不复习就真寄了。 ​\t第二节的Javaweb没带书，就光听张维玉讲了（讲的太慢了，哎）。 ​\t中午在二楼买的孜然肉拌面，排到我的时候断电了，这就是工带😅的日常。孜然肉确实挺好吃😋，9块，腊肠的太贵了12块，没舍得买。 ​\t下午全都是实验课。第一节是Javaweb，课本又TM忘带了，做了操作系统的实验3（太难啦）。第二节的神经网络与深度学习run了，老师又不点名😏。去菜鸟拿g304的接收器。找了大半天快递都没找到，最后才发现掉到货架后面了，CAO了。 ​\t拿完快递在二楼吃的饺子。 ​\t回宿舍睡了会儿去上自习了。得学习了。 ​\t明天还得测码，啥时候是个头啊😟. 配上一张晚上学习回来的图：","categories":["diary"]},{"title":"文章加密测试","path":"/2022/10/21/文章加密测试/","content":"10d79030e8222445804370796b90fca1c6633170324f5faa9b296864ddd36cd05e3e954fb26025d50f33e13be0ba10553a61396067e4c48673bab9f8e933e1e7f09ae12e3291b482b5f29408626d138068863a08c3ccf29945e042dcfd98d0a4 请输入密码查看.","tags":["blog"],"categories":["blog"]},{"title":"javaweb连接数据库实现图书管理系统","path":"/2022/10/19/javaweb连接数据库实现图书管理/","content":"index.jsp 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/19 Time: 12:04 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; import=&quot;java.sql.*&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;图书管理系统&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;./add.html&quot;&gt;添加图书信息&lt;/a&gt; &lt;/p&gt; &lt;table align=&quot;center&quot; width=&quot;50%&quot; border=&quot;1&quot;&gt; &lt;tr&gt; &lt;th&gt;书名&lt;/th&gt; &lt;th&gt;作者&lt;/th&gt; &lt;th&gt;出版社&lt;/th&gt; &lt;th&gt;价格&lt;/th&gt; &lt;th&gt;管理&lt;/th&gt; &lt;/tr&gt; &lt;% Class.forName(&quot;com.mysql.jdbc.Driver&quot;); Connection con = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;,&quot;root&quot;,&quot;wangzhe2412&quot;); String sql = &quot;select * from bookinfo&quot;; Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery(sql); while(rs.next())&#123; int id = rs.getInt(1); %&gt; &lt;tr&gt; &lt;td&gt;&lt;%= rs.getString(&quot;bookname&quot;)%&gt;&lt;/td&gt; &lt;td&gt;&lt;%= rs.getString(&quot;author&quot;)%&gt;&lt;/td&gt; &lt;td&gt;&lt;%= rs.getString(&quot;press&quot;)%&gt;&lt;/td&gt; &lt;td&gt;&lt;%= rs.getString(&quot;price&quot;)%&gt;&lt;/td&gt; &lt;td&gt; &lt;a href=&quot;./edit.jsp?id=&lt;%=id%&gt;&quot;&gt;修改&lt;/a&gt; &lt;a href=&quot;./del.jsp?id=&lt;%=id%&gt;&quot; onclick=&quot;return confirm(&#x27;确定要删除吗?&#x27;)&quot;&gt;删除&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &lt;% &#125; rs.close(); stmt.close(); con.close(); %&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt; add.html 123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;添加图书信息&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h2 align=&quot;center&quot;&gt;添加图书信息&lt;/h2&gt; &lt;form name=&#x27;form1&#x27; action=&quot;./add.jsp&quot; method=&quot;post&quot;&gt; &lt;table align=&quot;center&quot; width=&quot;30%&quot; border=&quot;1&quot;&gt; &lt;tr&gt; &lt;th width=&quot;30%&quot;&gt;书名：&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;bookname&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th width=&quot;30%&quot;&gt;作者：&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;author&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th width=&quot;30%&quot;&gt;出版社：&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;press&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th width=&quot;30%&quot;&gt;价格：&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;price&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th colspan=&quot;2&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;添加&quot;&gt; &lt;input type=&quot;reset&quot; value=&quot;重置&quot;&gt; &lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; add.jsp 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/10/12 Time: 14:55 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; import=&quot;java.sql.*&quot; %&gt;&lt;%@ page import=&quot;com.mysql.jdbc.Driver&quot; %&gt;&lt;% request.setCharacterEncoding(&quot;UTF-8&quot;); String bookname = request.getParameter(&quot;bookname&quot;); String author = request.getParameter(&quot;author&quot;); String press = request.getParameter(&quot;press&quot;); String price = request.getParameter(&quot;price&quot;); Class.forName(&quot;com.mysql.jdbc.Driver&quot;); Connection con = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;,&quot;root&quot;,&quot;wangzhe2412&quot;); String sql = &quot;insert into bookinfo values(null,?,?,?,?)&quot;; PreparedStatement pstmt =con.prepareStatement(sql); pstmt.setString(1,bookname); pstmt.setString(2,author); pstmt.setString(3,press); pstmt.setFloat(4,Float.parseFloat(price)); int result = pstmt.executeUpdate(); String msg = &quot;添加失败，单击确定跳转到图书列表页&quot;; if(result == 1)&#123; msg = &quot;添加成功，单击确定跳转到图书列表页&quot;; &#125; pstmt.close(); con.close();%&gt;&lt;script&gt; window.alert(&#x27;&lt;%= msg%&gt;&#x27;);&lt;/script&gt;&lt;% response.setHeader(&quot;Refresh&quot;,&quot;1,url =./index.jsp&quot;);%&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; edit.jsp 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263&lt;%@ page import=&quot;java.sql.*&quot; %&gt;&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/10/19 Time: 13:38 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;修改图书信息&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;% String id = request.getParameter(&quot;id&quot;); Connection con = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;,&quot;root&quot;,&quot;wangzhe2412&quot;); String sql = &quot;select * from bookinfo where id=?&quot;; PreparedStatement pstmt = con.prepareStatement(sql); pstmt.setInt(1,Integer.parseInt(id)); ResultSet rs = pstmt.executeQuery(); if(rs.next())&#123; String bookname = rs.getString(&quot;bookname&quot;); String author = rs.getString(&quot;author&quot;); String press = rs.getString(&quot;press&quot;); float price = rs.getFloat(&quot;price&quot;); %&gt; &lt;h2 align=&quot;center&quot;&gt;修改图书信息&lt;/h2&gt; &lt;form action=&quot;./edit_do.jsp&quot; method=&quot;post&quot; name=&quot;form1&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;&lt;%= id%&gt;&quot;&gt;; &lt;table align=&quot;center&quot; width=&quot;30%&quot; border=&quot;1&quot;&gt; &lt;tr&gt; &lt;th width=&quot;30%&quot;&gt;书名：&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;bookname&quot; value=&quot;&lt;%=bookname%&gt;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th width=&quot;30%&quot;&gt;作者：&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;author&quot; value=&quot;&lt;%=author%&gt;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th width=&quot;30%&quot;&gt;出版社：&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;press&quot; value=&quot;&lt;%=press%&gt;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th width=&quot;30%&quot;&gt;价格：&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;price&quot; value=&quot;&lt;%=price%&gt;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th colspan=&quot;2&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;修改&quot;&gt; &lt;input type=&quot;reset&quot; value=&quot;重置&quot;&gt; &lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;% &#125; rs.close(); pstmt.close(); con.close(); %&gt;&lt;/body&gt;&lt;/html&gt; edit_do.jsp 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;%@ page import=&quot;java.sql.*&quot; %&gt;&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/10/19 Time: 13:52 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;% request.setCharacterEncoding(&quot;UTF-8&quot;); String id = request.getParameter(&quot;id&quot;); String bookname = request.getParameter(&quot;bookname&quot;); String author = request.getParameter(&quot;author&quot;); String press = request.getParameter(&quot;press&quot;); String price = request.getParameter(&quot;price&quot;); Class.forName(&quot;com.mysql.jdbc.Driver&quot;); Connection con = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;,&quot;root&quot;,&quot;wangzhe2412&quot;); String sql = &quot;update bookinfo set bookname=?,author=?,press=?,price=? where id=?&quot;; PreparedStatement pstmt = con.prepareStatement(sql); pstmt.setString(1,bookname); pstmt.setString(2,author); pstmt.setString(3,press); pstmt.setFloat(4,Float.parseFloat(price)); pstmt.setInt(5,Integer.parseInt(id)); int result = pstmt.executeUpdate(); String msg = &quot;修改失败，点击确定跳转到图书列表页&quot;; if(result == 1)&#123; msg = &quot;修改成功，点击确定跳转到图书列表页&quot;; &#125; pstmt.close(); con.close();%&gt;&lt;script&gt;window.alert(&quot;&lt;%=msg%&gt;&quot;);&lt;/script&gt;&lt;% response.setHeader(&quot;Refresh&quot;,&quot;1,url=./index.jsp&quot;);%&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; del.jsp 12345678910111213141516171819202122232425262728293031323334353637&lt;%@ page import=&quot;java.sql.Connection&quot; %&gt;&lt;%@ page import=&quot;java.sql.DriverManager&quot; %&gt;&lt;%@ page import=&quot;java.sql.PreparedStatement&quot; %&gt;&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/10/19 Time: 14:06 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;% String id = request.getParameter(&quot;id&quot;); Connection con = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;,&quot;root&quot;,&quot;wangzhe2412&quot;); String sql = &quot;delete from bookinfo where id=?&quot;; PreparedStatement pstmt = con.prepareStatement(sql); pstmt.setInt(1,Integer.parseInt(id)); int result = pstmt.executeUpdate(); String msg = &quot;删除失败，点击确定跳转到图书列表页&quot;; if(result == 1)&#123; msg = &quot;删除成功，点击确定跳转到图书列表页&quot;; &#125; pstmt.close(); con.close();%&gt;&lt;script&gt;window.alert(&quot;&lt;%=msg%&gt;&quot;);&lt;/script&gt;&lt;% response.setHeader(&quot;Refresh&quot;,&quot;1,url = ./index.jsp&quot;);%&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 总结 只是用了结构，没有运用样式表。😁","tags":["javaweb"],"categories":["javaweb"]},{"title":"jQuery笔记","path":"/2022/09/27/jQuery笔记/","content":"jQuery概述 jQuery是一个JavaScript库，是对原生JS的封装，内部仍旧是JS实现的 jQuery的基本使用 jQuery download ¶script加载顺序 等着页面DOM加载完毕再去执行js代码 相对传统写法 123$(document).ready(function()&#123;\txxx&#125;) 等着页面DOM加载完毕再去执行js代码 相对简洁，推荐使用 123$(function()&#123;\txxx&#125;) ¶jQuery的顶级对象 $ 12345678//方法1$(function()&#123;\talert(1)&#125;)//方法2jQuery(function()&#123;\talert(1)&#125;) ¶jQuery对象和DOM对象 DOM对象只能调用DOM方法，jQuery对象只能调用jQuery方法 12//调用div$(&#x27;div&#x27;) ¶DOM对象和jQuery对象之间的转换 12var myVideo=document.querySelector(&#x27;video&#x27;);$(myVideo);//不用加引号 console.dir打印之后发现$(‘div’)是以伪数组的形式存储的 123//play()是一个方法$(&#x27;div&#x27;)[0].play();$(&#x27;div&#x27;).get(0).play(); jQuery常用API ¶选择器 ¶基础选择器 注意： $(‘div’)返回的是一个伪数组，要想真正获取其中的元素，要加索引号，例如： 12console.log($(&#x27;div&#x27;)[0]);console.log($(&#x27;div&#x27;).get(0)); ¶层级选择器 ¶隐式迭代 12//会将所有的div设置样式$(&#x27;div&#x27;).css(); ¶筛选选择器 $()里面的都是对象，所以:first、:laster、:eq(index)等的需要写到$()里面 ¶筛选方法 注意： 是方法 1$(&#x27;ui&#x27;).children();//将所有的儿子选出，不会把孙子辈的选出来 1$(&#x27;ul&#x27;).siblings(&#x27;li&#x27;);//除了自身节点之外的所有亲兄弟 1234//筛选选择器$(&#x27;ul li:eq(2)&#x27;).css();//筛选方法,推荐写法$(&#x27;ul li&#x27;).eq(2).css(); 小项目：新浪下滑菜单,多种做法 应用了隐式迭代，内部绑定事件 show()、hide()方法 12345678910&lt;script&gt; $(function()&#123; $(&#x27;.nav&gt;li&#x27;).mouseover(function()&#123; $(this).children(&#x27;ul&#x27;).show(); &#125;) $(&#x27;.nav&gt;li&#x27;).mouseout(function()&#123; $(this).children(&#x27;ul&#x27;).hide(); &#125;) &#125;)&lt;/script&gt; ¶排他思想 例如：点击当前按钮后更改颜色，其余按钮无颜色 123456789$(function()&#123; //隐式迭代，给所有的按钮绑定了click事件 $(&#x27;button&#x27;).click(function()&#123; //设置当前按钮颜色 $(this).css(&#x27;background&#x27;,&#x27;pink&#x27;); //让当前按钮的button兄弟节点更改为无颜色 $(this).siblings(&quot;button&quot;).css(&#x27;background&#x27;,&#x27;&#x27;); &#125;)&#125;) 小项目：淘宝服饰精品 ¶获得当前索引号 相比于用原生JS，jQuery更简洁 1$(this).index()//是方法，要加（），从0开始 在获取li的索引号时，不需要提前设置每个li的索引号 ¶链式编程 相当于以下代码 12$(this).css(&#x27;color&#x27;,&#x27;red&#x27;);$(this).siblings().css(&#x27;color&#x27;,&#x27;&#x27;); 注意是哪个对象执行样式 去除重复，以达到简洁 ¶样式操作 ¶操作css方法 123456//注意用花括号括起来$(&#x27;div&#x27;).css(&#123;\twidth: 400,\theight: 400， backgroundColor: &#x27;pink&#x27;&#125;) 如果是复合属性，要用驼峰命名法 ¶设置类样式方法 注意： 里面的类名不能加. 小项目：tab栏切换 上面设置css是给伪数组形式的元素设置，而不是直接的元素形式，所以可以通过 $(‘div’).eq(index).css()进行设置，而$(‘div’)[index]是直接的DOM元素形式，jQuery方法不能被DOM对象调用的，所以不正确 ¶类操作与className区别 ¶效果 ¶显示隐藏效果 show() 1show([speed,[easing],[fn]])\t//[]可以省略 hide() 参数规范和上述相同 toggle() 切换 参数规范和上述相同 在实际开发中一般是不用参数的 ¶滑动 solideDown() 下滑 slideUp() 上滑 参数规范和上述相同 slideToggle() 滑动切换 参数规范和上述相同 小项目：新浪下滑菜单动画优化版 1234567$(&#x27;.nav&gt;li&#x27;).mouseover(function()&#123; // $(this).children(&#x27;ul&#x27;).show(); $(this).children(&#x27;ul&#x27;).slideDown(200);&#125;)$(&#x27;.nav&gt;li&#x27;).mouseout(function()&#123; $(this).children(&#x27;ul&#x27;).slideUp(200);&#125;) ¶事件切换 两个函数都写时，在移入和移除时分别执行 只写一个函数时，在移入、移除时执行同一个函数 小项目：新浪下滑菜单切换优化版(两个函数) 更加简洁 $(’ ').hover() 12345678$(&#x27;.nav&gt;li&#x27;).hover( function()&#123; $(this).children(&#x27;ul&#x27;).slideDown(200); &#125;, function()&#123; $(this).children(&#x27;ul&#x27;).slideUp(200); &#125;) 小项目：新浪下滑菜单切换终极优化版(一个函数) 1234//使用hover()时只含一个函数，但存在bug:短时间内多次触发动画问题$(&#x27;.nav&gt;li&#x27;).hover(function()&#123; $(this).children(&#x27;ul&#x27;).slideToggle(200);&#125;) ¶动画队列及其停止排队的方法 短时间内多次触发动画，会使得动画形成一个动画队列，当鼠标移除动画触发范围时，动画仍旧会继续执行 小项目：新浪下滑菜单切换终极优化bug版(一个函数) 123$(&#x27;.nav&gt;li&#x27;).hover(function()&#123; $(this).children(&#x27;ul&#x27;).stop().slideToggle(200);&#125;) ¶淡入淡出 fadeOut() 淡出 fadeIn() 淡入 fadeToggle() 淡入淡出切换 上述规范相同 fadeTo() 以渐进方式调整到指定的不透明度 注意： 是调整的不透明度(不透明度为1表示是不透明的)，speed和opacity必须写 小项目：高亮显示案例 ¶自定义动画animate 里面的params以键值对形式，因为是元素做动画，所以要用DOM元素 1234567$(&#x27;button&#x27;).click(function()&#123; $(&quot;div&quot;).animate(&#123; left: 200, top: 200, opacity: .4 &#125;,500)&#125;) 小项目：折叠卡片/手风琴 1234$(&#x27;ul li&#x27;).mouseenter(function()&#123; $(this).stop().animate(&#123;width: 224&#125;).find(&#x27;.small&#x27;).stop().fadeOut().siblings().stop().fadeIn(); $(this).siblings(&#x27;li&#x27;).stop().animate(&#123;width:69&#125;).find(&#x27;.big&#x27;).stop().fadeOut().siblings().stop().fadeIn();&#125;) 注意： 要在动画前面加stop() ¶属性操作 1$(&#x27;div&#x27;).change(function()&#123;&#125;);//当div发生变化时调用函数 ¶设置或获取元素固有属性值 prop() property:属性的意思 是获取不了自定义属性的 ¶设置或获取元素自定义属性值attr() 好像是获取不了元素自带的属性 设置自定义索引： 123for(var i=0;i&lt;$(&#x27;div&#x27;).length;i++)&#123; $(&#x27;div&#x27;).eq(i).attr(&#x27;data-index&#x27;,i);&#125; ¶数据缓存data() 这里面的数据是存放在元素的内存里面的 获取H5自定义属性 data-index时不用写data-，并且返回的是数字型 12$().data(&#x27;uname&#x27;,&#x27;andy&#x27;);$().data(&#x27;index&#x27;);//获取data-index 小项目：购物车模块全选 1$(&#x27;input:checked&#x27;);//自动获取复选框选中的个数 元素自带属性要用prop()，自定义属性用attr()，一定要注意，否则样式不会生效 ¶文本属性值 例如清空文本框内容$('textarea').val(&quot;&quot;); 小项目：购物车模块-增减商品数量 注意： 程序里面有 return false,后面的代码就不会执行了 ¶保留几位小数 保留几位小数： (100/3).toFixed(2) -&gt; 33.33 ¶返回指定祖先元素 parents('选择器') 可以返回指定的祖先，注意是parents ¶元素操作 ¶遍历元素 each(function(index,domEle))&#123;&#125; index和domEle可以用其他自定义变量名称代替，使用jQuery对象时，需要将DOM对象转换为jquery对象，里面的是回调函数 $.each(调用对象,function(index,domEle)&#123;&#125;) 例如： 1234var arr=[];//数组$.each(arr,function(index,domEle)&#123;\tconsole.log(index,domEle);&#125;) 1234$.each(&#123;name:&quot;andy&quot;,age: 18&#125;,function(index,domEle)&#123;\tconsole.log(index,domEle);&#125;)//这里的index会把name、age输出，domEle将andy、18输出 ¶创建元素 1var li = $(&#x27;&lt;li&gt;i am the last one&lt;/li&gt;&#x27;) 实际上创建了一个新的标签对象，再将其添加到合适位置即可 ¶添加元素 内部添加 12var li=$(&#x27;&lt;li&gt;hello world&lt;/li&gt;&#x27;);$(&#x27;ul&#x27;).append(li); 外部添加 ![image-20220811181311419](image-20220811181311419.png) 12var div=$(&#x27;&lt;div&gt;hello world&lt;/div&gt;&#x27;);$(&#x27;.demo&#x27;).after(div);//在demo的后面插入新创建的div 区别: 内部添加是父子关系，外部添加是兄弟关系 ¶删除元素 123$(&#x27;ul&#x27;).remove();//谁调用谁删除$(&#x27;ul&#x27;).empty();//将ul中的所有li删除$(&#x27;ul&#x27;).html(&quot;&quot;); 小项目：购物车删除模块，属于购物车模块 ¶尺寸、位置操作 ¶尺寸 ¶位置 通过键值对的形式设置 position只能获取，不能设置 页面滚动事件： $(window).scroll(function()&#123;&#125;) ¶节流阀/互斥锁 两个函数不能同时执行，开个变量flag解决即可。 jQuery事件 ¶事件注册 单个事件注册： ¶事件处理 123456789//不同事件分别触发不同的函数$(&#x27;div&#x27;).on(&#123;//注意花括号\tmouseenter: function()&#123; alert(&#x27;1&#x27;);\t&#125;,\tclick: function()&#123; alert(2);\t&#125;&#125;) 1234//多个事件触发统一事件$(&#x27;div&#x27;).on(&quot;mouseenter mouseleave&quot;,function()&#123; alert(1);&#125;) 12345$(&#x27;ol&#x27;).on(&quot;click&quot;,&quot;li&quot;,function()&#123;\talert(1);&#125;)var li=$(&#x27;&lt;li&gt;hello world&lt;/li&gt;&#x27;);$(&#x27;ol&#x27;).append(li); on给后来插入的标签创建click事件 传统方式下在事件之前创建元素幷插入也是可以的 12345var li=$(&#x27;&lt;li&gt;hello world&lt;/li&gt;&#x27;);$(&#x27;ol&#x27;).append(li);$(&#x27;ol&#x27;).click(function(e)&#123; console.log(e.target);&#125;) 小项目：微博发布信息 1234567891011121314151617$(function()&#123; $(&#x27;.btn&#x27;).click(function()&#123; if($(&#x27;.message&#x27;).val())&#123; var li=$(&#x27;&lt;li&gt;&lt;/li&gt;&#x27;); li.html($(&#x27;.message&#x27;).val()+&#x27;&lt;p&gt;删除&lt;/p&gt;&#x27;); $(&#x27;ul&#x27;).prepend(li); li.slideDown(); $(&#x27;.message&#x27;).val(&quot;&quot;); &#125; $(&#x27;.details ul&#x27;).on(&#x27;click&#x27;,&#x27;p&#x27;,function()&#123; $(this).parent().slideUp(function()&#123; $(this).remove(); &#125;); &#125;) &#125;)&#125;) 2. 事件处理off()解绑事件 1234$(&#x27;div&#x27;).on(&#123;&#125;)；$(&#x27;div&#x27;).off();//将div的所有事件解绑$(&#x27;div&#x27;).off(&#x27;click&#x27;);//接触某一个事件$(&#x27;div&#x27;).one(&#x27;click&#x27;,function()&#123;&#125;);//只会执行一次，执行完之后就不需要解绑了 3.自动触发事件trigger() 1$(selector).trigger(event,[param1,param2,...]) triggerHandler() 方法触发被选元素的指定事件类型。但不会执行浏览器默认动作，也不会产生事件冒泡。 triggerHandler() 方法与 trigger() 方法类似。不同的是它不会触发事件（比如表单提交）的默认行为，而且只影响第一个匹配元素。 它不会引起事件（比如表单提交）的默认行为 .trigger() 会操作 jQuery 对象匹配的所有元素，而 .triggerHandler() 只影响第一个匹配元素。 由 .triggerHandler() 创建的事件不会在 DOM 树中冒泡；如果目标元素不直接处理它们，则不会发生任何事情。 该方法的返回的是事件处理函数的返回值，而不是具有可链性的 jQuery 对象。此外，如果没有处理程序被触发，则这个方法返回 undefined。 例如： 1234567891011121314151617181920212223&lt;!--triggerhandler--&gt;&lt;html&gt;&lt;head&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/jquery/jquery.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;$(document).ready(function()&#123; $(&quot;input&quot;).select(function()&#123; $(&quot;input&quot;).after(&quot;发生 Input select 事件！&quot;); &#125;); $(&quot;button&quot;).click(function()&#123; $(&quot;input&quot;).triggerHandler(&quot;select&quot;); &#125;);&#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;input type=&quot;text&quot; name=&quot;FirstName&quot; value=&quot;Hello World&quot; /&gt;&lt;br /&gt;&lt;button&gt;激活 input 域的 select 事件&lt;/button&gt;&lt;p&gt;请注意，与 trigger() 方法不同，triggerHandler() 方法不会引起所发生事件的默认行为（文本不会被选中）。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&lt;!--与 trigger() 方法不同，triggerHandler() 方法不会引起所发生事件的默认行为（文本不会被选中--&gt; 12345678910111213141516171819202122&lt;!--trigger--&gt;&lt;html&gt;&lt;head&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/jquery/jquery.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;$(document).ready(function()&#123; $(&quot;input&quot;).select(function()&#123; $(&quot;input&quot;).after(&quot;文本被选中！&quot;); &#125;); $(&quot;button&quot;).click(function()&#123; $(&quot;input&quot;).trigger(&quot;select&quot;); &#125;);&#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;input type=&quot;text&quot; name=&quot;FirstName&quot; value=&quot;Hello World&quot; /&gt;&lt;br /&gt;&lt;button&gt;激活 input 域的 select 事件&lt;/button&gt;&lt;/body&gt;&lt;/html&gt;&lt;!--会执行默认行为--&gt; ¶事件对象 更多方法参考webAPI中讲解的内容 jQuery其他方法 ¶拷贝对象 上面的是对象&#123;&#125;拷贝，不是标签 分析 targetObj{}为空 123456789$(function()&#123; var obj=&#123; id: 1, name: &#x27;andy&#x27; &#125; var targetObj=&#123;&#125; $.extend(targetObj,obj); console.log(targetObj);&#125;) targetObj{}不为空时会覆盖targetObj原来的数据 deep 浅拷贝只是将地址拷贝给了目标对象，修改两个其中一个，另一个也会跟着改变 深拷贝会将所有的数据拷贝另外开辟一个地址存储，不会拷贝地址，两者数据不会共享，冲突的数据会覆盖，不冲突的保留 标签拷贝 ¶多库共存 自己写的代码有$符号，而jQuery又自带$,会产生冲突,例如： 1234567$(function()&#123;\tfunction $(ele)&#123; return document.querySelector(ele);\t&#125;\t$(&#x27;div&#x27;);//自定义的函数也带有$\t$.each();//会报错，它不知道$是jQuery的还是自定义函数的&#125;) 如果jQuery还是冲突，就将$让用户自己重命名：var xxx=$.noConflict() ¶jQuery插件 要先引入jQuery插件 插件 第二个插件地址停更至2020 图片懒加载插件 全屏滚动 ToDoList案例","tags":["code","jquery"],"categories":["jquery"]},{"title":"修复hexo使用Markdown格式添加图片的问题","path":"/2022/09/19/修复hexo使用Markdown格式添加图片的问题/","content":"修复了使用Markdown格式添加图片的问题 下载插件： 1npm install hexo-renderer-marked 修改博客根目录文件中的配置项： 1234post_asset_folder: truemarked: prependRoot: true postAsset: true 注意路径使用： 1![](image.jpg)","tags":["blog"],"categories":["blog"]},{"title":"javascript进阶","path":"/2022/09/19/javascript进阶/","content":"¶API API(Application Programming Interface应用程序编程接口)，是一些预先定义的函数,目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力,而无需源码,或理解内部工作机制的细节 ¶WEB API 是浏览器提供的一套操作浏览器功能和页面元素的API(BOM和DOM)， 现阶段主要针对于浏览器讲解常用的API,主要针对浏览器做交互效果，MDN详细API:https://developer.mozilla.org/zh-CN/docs/Web/API ¶DOM ¶简介 文档对象模型(Document Object Model),是W3C组织推荐的处理可扩展标记语言(html或者XML)的标椎 编程接口.通过DOM接口可以改变网页的内容、结构和样式 文档:一个页面就是一个文档,DOM中使用document表示 元素:页面中的所有标签都是元素,DOM中使用element表示 节点:网页中的所有页面都是节点(标签、属性、文本、注释等),DOM中使用node ¶获取元素 通过以下方式获得： 根据ID获取:getElementById()方法获取带有ID的元素对象: 由于元素的 ID 在大部分情况下要求是独一无二的，这个方法自然而然地成为了一个高效查找特定元素 的方法。返回的是一个匹配ID的DOM的Element对象,若没有找到,就返回null，例如： 123456&lt;div id=&quot;time&quot;&gt;2021&lt;/div&gt;&lt;script&gt;\t//页面是从上向下加载的,所以先得有标签,才能在运行script中的内容\tvar timer=document.getElementById(&#x27;time&#x27;); //参数必须是字符串类型\tconsole.log(timer.value);//最后结果输出(完整标签)&lt;div id=&quot;time&quot;&gt;2021&lt;/div&gt;&lt;/script&gt; console.dir(timer)//打印 div#timer 属性和方法 根据标签获取: getElementsByTagName()方法可以返回带有指定标签名的对象的集合,返回过来的是 获取过来元素对象的集合 以伪数组的形式存储 例如： 1234567891011&lt;ul&gt; &lt;li&gt;hello1&lt;/li&gt; &lt;li&gt;hello2&lt;/li&gt; &lt;li&gt;hello3&lt;/li&gt; &lt;li&gt;hello4&lt;/li&gt; &lt;li&gt;hello5&lt;/li&gt;&lt;/ul&gt;&lt;script&gt;var cnt=document.getElementsByTagName(&#x27;li&#x27;);console.log(cnt[0]);//打印出 &lt;li&gt;hello1&lt;/li&gt;&lt;/script&gt; 循环打印出所有li标签的内容 1234567for(var i=0;i&lt;(cnt.length);i++)&#123;\tconsole.log(cnt[i])&#125;//或for(var t in cnt)&#123;\tconsole.log(cnt[t])&#125; 还可以获取某个元素(父元素)内部所有指定标签名的子元素: 例如: 如何获取ol中的li,而不获取ul中的li? 12345678910111213141516&lt;ul&gt; &lt;li&gt;hello1&lt;/li&gt; &lt;li&gt;hello1&lt;/li&gt;&lt;/ul&gt;&lt;ol id=&#x27;ol&#x27;&gt; &lt;li&gt;hello1&lt;/li&gt; &lt;li&gt;hello1&lt;/li&gt;&lt;/ol&gt;&lt;script&gt; //方法一 var cnt=document.getElementsByTagName(&#x27;ol&#x27;); console.log(cnt[0].getElementsByTagName(&#x27;li&#x27;)); //方法二 var cnt=document.getElementById(&#x27;ol&#x27;); console.log(cnt.getElementsByTagName(&#x27;li&#x27;));&lt;/script&gt; 父元素必须是单个对象(必须指明是哪一个元素对象),获取的时候不包含父元素自己 以上方法为传统方式 通过HTML5新增的方法获取: 123getElementsByClassName(&#x27;类名&#x27;); //根据类名返回元素对象集合querySelector(&#x27;选择器&#x27;); //根据指定选择器返回第一个元素对象,注意只能返回第一个元素对象,里面的选择器需要加符号(.demo #demo)，也可以是标签选择器querySelectorAll(&#x27;选择器&#x27;); //根据指定选择器返回所有元素对象,集合 特殊元素获取(body,html): 获取body:document.body 不带参数 获取html:document.documentElement 不带参数 ¶事件基础 事件三要素/事件三部分:事件源、事件类型、事件处理程序 事件源:事件被触发的对象,谁-&gt;按钮 事件类型:如何触发,什么事件-&gt;鼠标点击(onclick) 鼠标经过 键盘按下 滑轮滚动等 事件处理程序:通过一个函数赋值的方式完成 例如一个简单的事件: 1234567&lt;button id=&quot;btn&quot;&gt;example&lt;/button&gt;&lt;script&gt; var btn=document.getElementById(&#x27;btn&#x27;); btn.onclick=function()&#123; //匿名函数调用 alert(&#x27;hello world&#x27;); &#125;&lt;/script&gt; 执行事件的步骤: 获取事件源 var div=document.getSelecetor(‘div’) 注册事件(绑定事件) div.onclick 添加事件处理程序(采取函数赋值形式) div.onclick=fcuntion(){} 常见的鼠标事件: onclick:左键触发 onmouseover:经过触发 onmouseout:离开触发 onfocus:焦点触发 onblur:失去焦点触发 onmousemove:移动触发 onmouseup:弹起触发 onmousedown:按下触发 ¶操作元素 DOM可以改变网页的内容、结构和样式,利用DOM操作元素来改变元素里面的内容、属性等 直接调用时是获取元素的文本内容，例如demo.innerText 改变元素内容: element.innerText:从起始位置到终止位置的内容,但它去除HTML标签,同时空格和换行也会去掉，用的较少 element.innerHTML:起始位置到终点位置的全部内容,包括HTML标签,同时保留空格和换行，用的较多 上述只是对普通的盒子进行的，要想对表单元素进行设置，需要调用value,例如:input.value=‘xxx’ 123var div=document.querySelector(&#x27;div&#x27;);div.innerText=&#x27;xxx&#x27;;text[0].innerText +=&#x27;hello&#x27; //追加内容 innerText输入的是文本,不能识别HTML,并且能够去除空格和标签;而innerHTML能够识别HTML,同时保留空格和换行 例如:div.innerHTML='&lt;strong&gt;今天是:&lt;/strong&gt;2021' 推荐使用innerHTML(是一种标准) 常用元素的属性操作: 1、innerText、innerHTML改变元素内容(普通盒子如div)，innerHTML更常用 2、src href 3、id alt title 图片切换小项目 12345678910111213141516&lt;button id=&quot;a&quot;&gt;one&lt;/button&gt;&lt;button id=&quot;b&quot;&gt;two&lt;/button&gt;&lt;img src=&quot;../CSS3/img/a.jpg&quot; alt=&quot;no_img&quot; title=&quot;girl&quot;&gt;&lt;script&gt; var a=document.getElementById(&#x27;a&#x27;); var b=document.getElementById(&#x27;b&#x27;); var img=document.querySelector(&#x27;img&#x27;); a.onclick=function()&#123; img.src=&#x27;../CSS3/img/b.png&#x27;; img.title=&#x27;man&#x27;; &#125; b.onclick=function()&#123; img.src=&#x27;../CSS3/img/a.jpg&#x27;; img.title=&#x27;girl&#x27;; &#125;&lt;/script&gt; 表单元素的属性操作: 利用DOM可以操作如下表单元素的属性: type value checked selected disabled(被禁用) 表单里面的值 文字内容是通过value来修改的 123456example.value=&#x27;xxxx&#x27;;btn.onclick=function()&#123; btn.disabled=true;//方法一,按钮禁用 this.disabled=true;//方法二,按钮禁用 //this指的是事件函数的调用者&#125; 样式属性操作： 通过JS修改元素的大小、颜色、位置等样式 12element.style\t//行内样式操作element.className\t//类名样式操作 行内样式操作 修改的样式很少时使用 里面的属性名采用驼峰命名法，比如backgroundColor、fontSize等 JS修改的style样式操作，产生的是行内样式，css权重比较高 1234var dic=document.querySelector(&#x27;div&#x27;);div.onclick=function()&#123;\tthis.style.backgroundColor=&#x27;purple&#x27;&#125; 小项目1：循环精灵图 1234567&lt;script&gt; var lis=document.querySelectorAll(&#x27;li&#x27;); for(var i=0;i&lt;lis.length;i++)&#123; var index=i*44; lis[i].style.backgroundPosition = &#x27;0 -&#x27;+index+&#x27;px&#x27;; &#125;&lt;/script&gt; 小项目2：显示隐藏文本框内容 当修改的样式太多时，使用行内样式显得比较复杂 类名样式操作 先将要修改的样式提前声明一个样式类，然后再调用声明的样式this.className=‘change’ className会直接更改元素的类型，会覆盖原先的类名 如果想要保留原先的类，则： this.className=‘first change’ 在实际开发中，更推荐使用类名样式，这样在后期的维护中只需要修改类名中的内容即可，而不用去修改JS 小项目：密码框格式提示错误信息： 两种方式均可 5.排他思想 当页面有多个按钮时，为每个按钮设置一个onclick会显得繁琐，这时最好用循环来做 123456789101112&lt;script&gt; var btns=document.getElementsByTagName(&#x27;button&#x27;); for(var i=0;i&lt;btns.length;i++)&#123; btns[i].onclick=function()&#123; //在调用之前将所有其他的按钮背景颜色置空，在执行要改变的颜色 for(var i=0;i&lt;btns.length;i++)&#123; this.style.backgroundColor=&#x27;&#x27;; &#125; this.style.backgroundColor=&#x27;pink&#x27;; &#125; &#125;&lt;/script&gt; 小项目1：百度换肤 小项目2：表格隔行变色的效果，不难，就不写了 小项目3：表单全选取消全选 6.自定义属性的操作 第一种方式只能用于标签自带的属性值，而第二种可以调用用户自定义的属性 12//index为自定义属性，id为标签自带属性&lt;div id=&#x27;demo&#x27; index=&#x27;1&#x27;&gt;&lt;/div&gt; 设置属性值： 提倡标签自带的属性用第一种写，自定义的用第二种，只是提倡 移除属性： 小项目：tab栏切换,京东做法 重要 getAttribute是没有兼容性问题的，第二种ie11才开始支持 注意一点： 1234567&lt;div data-list-name=&#x27;xxx&#x27;&gt;&lt;/div&gt;&lt;script&gt;\tvar div=document.querySelector(&#x27;div&#x27;);\tconsole.log(div.dataset-listName);\tconsole.log(div.dataset[&#x27;listName&#x27;]);&lt;/script&gt; data-list-name–&gt;驼峰命名法–&gt;listName 如果自定义属性里面有多个-链接的单词，我们获取属性的时候要采取驼峰命名法 ¶节点操作 父级节点 子节点 实际开发中更提倡使用上面一种方式，第一种方式包含了无用的节点 获取指定的节点： 上面的方式会包含无用的节点 上面的方式不包含无用的节点，但有兼容性问题，解决方案如下(实际开发中的)： 小项目：新浪下拉菜单 兄弟节点 获取的是上、下一个兄弟节点，包括元素节点或者文本节点等等 创建节点 后面追加元素 例如 123456&lt;ul&gt;&lt;/ul&gt;&lt;script&gt; var ul=document.querySelector(&#x27;ul&#x27;); var li=document.createElement(&#x27;li&#x27;); ul.appendChild(li);&lt;/script&gt; 1ul.insertBefore(li,ul.children[0]); 小项目：简单版发布浏览案例 删除节点 小项目：删除留言案例 123&lt;a href=&#x27;javascript:void(0);&#x27;&gt; &lt;/a&gt;//或&lt;a href=&#x27;javascript:;&#x27;&gt; &lt;/a&gt; 不要忘记后面的分号 复制节点 这样只是复制了一份节点，还需要将其放到结构中去 123var ul=document.querySelector(&#x27;ul&#x27;);var clone_li=ul.children[0].cloneNode();ul.appendChild(clone_li); 可以用appendChild或者insertBefore 小项目：动态生成表格 循环数组对象 12345678&#123;\tname: &#x27;xx&#x27;,\tsex: &#x27;xx&#x27;,&#125;//用,其中obj[k]获取下表为k的属性值for(var k in obj)&#123;\tobj[k];&#125; 三种动态创建元素的区别 相当于重新创建并加载一个新的页面，在实际开发中不常用 1234//拼接字符串的效率很低，大约3100毫秒左右for(var i=0;i&lt;=100;i++)&#123;\tinner.innerHTML+=&#x27;&lt;a href=#&gt;xx&lt;/a&gt;&#x27;;&#125; 123456//利用数组存取，然后再join，效率很高,大约7毫秒左右var arr=[];for(var i=0;i&lt;=100;i++)&#123;\tarr.push(&#x27;&lt;a href=#&gt;xx&lt;/a&gt;&#x27;);&#125;inner.innerHTML=arr.join(&#x27;&#x27;); 123456//比innerHTML拼接字符串的方法效率高很多，但比innerHTML数组连接相比效率低,大约需要20毫秒左右var create=document.querySelector(&#x27;.create&#x27;);for(var i=0;i&lt;=100;i++)&#123;\tvar a=document.createElement(&#x27;a&#x27;);\tcreate.appendChile(a);&#125; 面试时可能会问到 ¶DOM重点核心(总结) ¶ ¶DOM事件高级 ¶注册事件(绑定事件) 1234567891011// var hello=function()&#123;// alert(&#x27;hellonihao &#x27;);// &#125;function hello()&#123; alert(&#x27;hello world&#x27;);&#125;var btns=document.querySelectorAll(&#x27;button&#x27;);btns[1].addEventListener(&#x27;click&#x27;,hello);// btns[1].addEventListener(&#x27;click&#x27;,function()&#123;// alert(&#x27;hello world&#x27;);// &#125;) addEventListener()同一个元素同一个事件可以添加多个监听器(事件处理程序)，IE9之前版本支持，推荐使用addEventListener(); attachEvent()是IE9之前版本支持，仅做了解，实际生产环境中不要使用 ¶删除事件(解绑事件) 12345678910&lt;div&gt;1&lt;/div&gt;&lt;div&gt;2&lt;/div&gt;&lt;div&gt;3&lt;/div&gt;&lt;script&gt; var divs=document.querySelectorAll(&#x27;div&#x27;); divs[0].onclick=function()&#123; alert(&#x27;hello world&#x27;); divs[0].onclick=null;//解绑事件 &#125;&lt;/script&gt; listener不能用匿名函数来写 12345678910111213&lt;div&gt;1&lt;/div&gt;&lt;div&gt;2&lt;/div&gt;&lt;div&gt;3&lt;/div&gt;&lt;script&gt; var divs=document.querySelectorAll(&#x27;div&#x27;); //事件监听 divs[0].addEventListener(&#x27;click&#x27;,fun); //事件监听函数 function fun()&#123; alert(&#x27;worji&#x27;); divs[0].removeEventListener(&#x27;click&#x27;,fun); &#125;&lt;/script&gt; 第二种使用attachEvent()时的解绑事件函数 ¶DOM事件流 123456789101112131415//结果是：先弹出father，再弹出son&lt;div class=&quot;father&quot;&gt; father &lt;div class=&quot;son&quot;&gt;son&lt;/div&gt;&lt;/div&gt;&lt;script&gt; var father=document.querySelector(&#x27;.father&#x27;); var son=document.querySelector(&#x27;.son&#x27;); father.addEventListener(&#x27;click&#x27;,function()&#123; alert(&#x27;father&#x27;); &#125;,true); son.addEventListener(&#x27;click&#x27;,function()&#123; alert(&#x27;son&#x27;); &#125;,true)&lt;/script&gt; ¶事件对象 1div.onclick=function(event)&#123;&#125; event就是一个事件对象，写到监听函数里面当做形参来看 事件对象只有有了事件(onclick onmouseover…)才会存在，他是系统自动创建的，不需要我们传递参数 事件对象是事件的一系列相关数据的集合，跟事件相关的，比如鼠标点击里面就包含了鼠标的相关信息、鼠标坐标等，如果是键盘事件就包含键盘的信息，不如判断用户按下了那个键等 事件对象的名称是可以自己修改的，建议使用e来代替 兼容性问题：IE678用window.event 123div.onclick=function(e)&#123;\tconsole.log(window.event);&#125; 兼容性处理方案：e=e||window.event;但实际开发中不太需要 事件对象的常见属性和方法： target: e.target返回的事触发事件的对象(元素)，而this返回的事绑定事件的对象，例如当鼠标点击li中的内容1时： 123456789101112&lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt;&lt;/ul&gt;&lt;script&gt; var ul=document.querySelector(&#x27;ul&#x27;); ul.addEventListener(&#x27;click&#x27;,function(e)&#123; console.log(e.target); console.log(this); &#125;)&lt;/script&gt; console.log(e.target)会输出,因为鼠标点击的是li中的1，所以触发元素是li,然后通过冒泡传给ul；console.log(this)会输出ul，因为当前绑定事件的元素是ul 但e.target存在兼容性问题，在IE678中不能使用，此时需要调用e.srcElement; 兼容方案：var target=e.target||e.srcElement currentTarget 是跟this非常相似的属性，但currentTarget存在兼容性问题，IE678不认识，所以在实际开发中提倡使用this e.type返回事件的类型，不带On，如click、mouseover、mouseout e.preventDefault() 阻止默认的行为(事件) 例如链接、表单，我们要求当满足某个条件时才可以跳转到该链接上去，没有满足时让链接不跳转，或者让提交按钮不提交 是一个方法，需要加小括号 12345678&lt;a href=&quot;http://cs.kittates.top&quot;&gt;link&lt;/a&gt;&lt;script&gt; var a=document.querySelector(&#x27;a&#x27;); a.addEventListener(&#x27;click&#x27;,function(e)&#123; e.preventDefault();//dom推荐方法 e.returnValue;//低版本浏览器使用，IE678 &#125;) &lt;/script&gt; 低版本浏览器使用e.returnValue,注意是一个属性，不需要加小括号 1return false 也能阻止默认行为，没有兼容性问题，但其之后的代码不再执行 ¶阻止事件冒泡 面试&amp;&amp;开发 标准写法：利用e.stopPropagation()方法 例如让son弹出,而father不弹出，则需要在son中的函数中调用e.stopPropagation()方法来阻止向上一级的冒泡，存在兼容性问题，IE678不能使用 IE678：window.event.canelBubble=true ¶事件委托(代理、委派) 事件冒泡的一个应用 不用为每个子节点绑定事件(太繁琐)，不必重复使用DOM 1234567891011121314&lt;ul&gt; &lt;li&gt;hello world&lt;/li&gt; &lt;li&gt;hello world&lt;/li&gt; &lt;li&gt;hello world&lt;/li&gt; &lt;li&gt;hello world&lt;/li&gt; &lt;li&gt;hello world&lt;/li&gt;&lt;/ul&gt;&lt;script&gt; var ul=document.querySelector(&#x27;ul&#x27;); ul.addEventListener(&#x27;click&#x27;,function(e)&#123; //e.target表明是哪一个节点，如果是点击的ul中的li,则会显示li，通过e.target.style设置该节点的相应属性即可 e.target.style.backgroundColor=&#x27;pink&#x27;; &#125;)&lt;/script&gt; ¶常用的鼠标事件 常用的鼠标事件： 禁止鼠标右键菜单 contextmenu鼠标右键菜单事件 虽然不显示右键菜单，但是还是可以通过ctrl+v来复制和粘贴的 禁止鼠标选中(selectstart 开始选中) selectstart鼠标选中事件 但是： 从文字的最左边还是有一条缝隙是可以复制的 crtl+A也可以 F12键调试复制 鼠标事件对象 e.screen在实际开发中用的比较少，了解 小项目：跟随鼠标移动的小天使 用到的是mousemove事件，获取鼠标移动时的数据 注意：设置坐标时记得加后面的单位 12img.style.top=y-img.height/2+&#x27;px&#x27;;img.style.left=x-img.width/2+&#x27;px&#x27;; 相同原理的样例：淘宝商品封面放大效果 ¶常用的键盘事件 Alt键、左右箭头键等功能键onkeypress不能识别 存在执行顺序： 如果keydown和keypress事件都存在时，先执行keydown，最后执行keyup事件 键盘事件对象： 通过keyCode可以获取键盘按键的ASCII码值，从而判断按下了哪个键 **注意：**keyup、keydown事件不区分字母大小写，a和A得到的都是65；keypress是区分大小写的，默认是大写 小项目1：模拟京东按键输入内容 小项目2：模拟京东快递单号查询 拓展开发：射击小游戏 ¶BOM ¶BOM概述 例如在不同的浏览器调用alert函数，弹出的外观是不一样的 DOM包含在BOM中，所以 在学习DOM时，经常是document.querySelector(‘xxx’),而规范的写法是window.document.querySelector(‘xxx’)，window可以省略的 在DOM中声明的全局变量或方法，在BOM中可以通过window.example的形式调用 ¶window对象的常见事件 窗口加载事件 123456789&lt;script&gt; window.onload=function()&#123; var btn=document.querySelector(&#x27;button&#x27;); btn.onclick=function()&#123; alert(&#x27;hello&#x27;); &#125; &#125;&lt;/script&gt;&lt;button&gt;click&lt;/button&gt; 这样就可以写到文档的任何一个位置了，也可以外部引用 window.onload若有多个，只会执行最后一个；而window.addEventListener(‘load’,function(){})若有多个时，会全部执行 DOMContentLoaded: DOMContentLoaded在把基本构架加载完成之后就会执行，而window.onload是将所有内容加载后才执行，相比之下，DOMContentLoaded比window.onload加载速度快 调整窗口大小事件 resize事件 window.innerWidth 获取当前屏幕的宽度 ¶定时器 setTimeout()定时器 setTimeout()属于window对象，window可以省略，可以直接调用，像alert(); 延时时间是毫秒单位，省略默认为0 函数调用可以直接在setTimeout()里面写函数，也可以在外部写完后再在setTimeout里面调用，还有一种不提倡的写法:‘函数名()’ 1234567891011//方法一setTimeout(function()&#123;\talert(&#x27;xxx&#x27;);&#125;,2000)//方法二function callback()&#123;\talert(&#x27;xxx&#x27;);&#125;setTimeout(callback,2000);//不提倡写法setTimeout(&#x27;callback()&#x27;,2000); 由于页面中可能会有多个不同的定时器，可以给定时器加标识符（名字），例如： 12var time1=setTimeout(callback1,2000);var time2=setTimeout(callback2,2000); ![image-20220725191625173](image-20220725191625173.png) 小项目：5s之后自动关闭广告 清除定时器：clearTimeout() 1234567891011121314&lt;script&gt; window.onload=function()&#123; var btn=document.querySelector(&#x27;button&#x27;); var timer=setTimeout(function()&#123; console.log(&#x27;bomb&#x27;); &#125;,5000); btn.addEventListener(&#x27;click&#x27;,function()&#123; clearTimeout(timer); console.log(&#x27;stop the bomb&#x27;); &#125;); &#125;&lt;/script&gt;&lt;button&gt;cancel&lt;/button&gt; setInterval()定时器 小项目：倒计时 清除定时器：clearInterval() 小项目：发送短信 ¶this指向问题 面试重点 在全局作用域或者是普通函数中：this指向全局对象window **注意：**计时器中的this指向window 在方法中调用：this指向的是包含该方法的对象(调用者)，例如 12345var o=&#123;\tsayHi: function()&#123; console.log(this);//this指向o\t&#125;&#125; 构造函数中调用:this指向构造函数的实例，例如： 1234function()&#123;\tconsole.log(this);//指向fun&#125;var fun=new fun(); ¶JS执行队列 例如： 12345console.log(1);setTimeout(function()&#123;\tconsole.log(3);&#125;,1000);console.log(2); 上述结果为：先1 再2 后3，运行了异步处理机制 JS虽然是单线程的，但是允许处理多个任务 12345console.log(1);setTimeout(function()&#123;\tconsole.log(3);&#125;,0);console.log(2) 上述结果为：先1 再2 后3,原因如下： 任务队列又称为消息队列 JS执行机制 执行栈中的任务完成之后，会把任务队列中的任务放到执行栈中，继续执行。所有任务执行完成之后，队列就会清空 **事件循环(event loop)：**执行栈中的同步任务完成之后，会重复的到任务队列中查看是否有新的任务，如果有，就拿到执行栈中执行 ¶location对象 location对象属性 重点记住href、search 小项目1：5秒钟之后自动跳转页面 小项目2：获取URL参数数据： 通过location.search获取参数,格式是类似于?name=kittates的形式，先通过substr获取name=kittates的字串，然后通过split('=')将其分割为数组，得到第二个参数即为所需， 1234var params=location.search.substr(1);var t=params.split(&#x27;=&#x27;)[1];var span=document.querySelector(&#x27;span&#x27;);span.innerHTML=t; location对象的方法 location.href()和location.assign()都能够返回前一个页面，location.replace()不能后退，replace将url的地址替换了，以前地址的缓存被替换了 ¶navigator对象 根据是手机端还是电脑端打开的页面从而以不同的形式展现 了解即可，一般情况下都是服务端做的 ¶history对象 123456789&lt;script&gt;\tvar btn=document.querySelector(&#x27;button&#x27;);\tbtn.addEventListener(&#x27;click&#x27;,function()&#123; history.forward();//前进 history.back();//后退 history.go(2);//前进2步 history.go(-3);//后退3步\t&#125;)&lt;/script&gt; 一般在浏览器中不会使用，但是会在一些OA办公系统中见到 ¶PC端网页特效 ¶元素偏移量offset offsetTop和offsetLeft以带有定位的父亲为准，如果有父亲或者父亲没有定位，则以body为准 offset与style的区别 行内样式表: 1&lt;div style=&#x27;&#x27;&gt; 小项目1：获取鼠标在盒子内的坐标 小项目2：拖动模态框 小项目3：仿京东放大镜页面效果 ¶元素可视区client 与offset的区别是：clientWidth、clientHeight不包含边框 ¶淘宝flexible.js源码分析 立即执行函数：不需要调用，立马能够自己执行的函数 写法1：（function() {})() 123(function()&#123;\tconsole.log(2);&#125;)() 写法2：（function(){}()) 123(function()&#123;\tconsole.log(2);&#125;()) 里面也可以传递参数 123(function(a,b)&#123;\tconsole.log(a,b);&#125;)() 也可以为立即函数起个名字 123(function sum(a,b)&#123;\tconsole.log(a+b);&#125;)(a,b) 立即函数独立的创建了一个作用域，里面所有的变量都是局部变量，不会有命名冲突的情况 ![image-20220729112920811](image-20220729112920811.png) ¶元素滚动scroll scrollWidth和scrollHeight不包含边框，但是包含padding，内容可能会超出盒子的范围，所以获取的是元素实际的大小 12//显示滚动条overflow: auto scroll事件 小项目：仿淘宝固定右侧侧边栏 注意 获取页面被卷去的高度：window.pageYOffset，但存在兼容性问题 DTD： 兼容性封装函数如上 页面滚动距离用window.pageXOffset、window.pageYOffset获取 mouseenter和mouseover的区别： mouseover子盒子会冒泡到当前盒子而mouseenter不会 mouseover会冒泡 ¶动画函数封装 1234567891011121314151617181920212223242526272829303132333435363738&lt;style&gt; div &#123; position: absolute; left: 0; width: 100px; height: 100px; background-color: pink; &#125; span &#123; position: absolute; left: 0; top: 200px; display: block; width: 150px; height: 150px; background-color: purple; &#125;&lt;/style&gt;&lt;div&gt;&lt;/div&gt;&lt;span&gt;夏雨荷&lt;/span&gt;&lt;script&gt; // 简单动画函数封装obj目标对象 target 目标位置 function animate(obj, target) &#123; var timer = setInterval(function() &#123; if (obj.offsetLeft &gt;= target) &#123; // 停止动画 本质是停止定时器 clearInterval(timer); &#125; obj.style.left = obj.offsetLeft + 1 + &#x27;px&#x27;; &#125;, 30); &#125; var div = document.querySelector(&#x27;div&#x27;); var span = document.querySelector(&#x27;span&#x27;); // 调用函数 animate(div, 300); animate(span, 200);&lt;/script&gt; 上述存在使用absolute relative动画速度不同的问题？ 解决： absolute：如果元素没有已定位的祖先元素，那么它的位置则是相对于最初的包含块（body）。 relative：元素“相对于”它的原始起点（上一个位置）进行移动 封装 上述方法每次调用就会开辟一段空间，性能不太好。 性能优化+消除变量歧义： 将timer作为调用对象的属性进行操作 给动画设置按钮，点击按钮执行，出现问题： 按钮点击次数越多，动画速度越快，解决方案： 先清除之前的定时器，再调用动画 缓动动画 代码实现： 12345678910111213141516&lt;script&gt; function animate(obj,target)&#123; obj.timer=setInterval(function()&#123; if(obj.offsetLeft==target)&#123; clearInterval(obj.timer); &#125; //再计时器内部设置步长,将步长设置为整数，避免出现精度问题而无法正常到达目标位置 var step=Math.ceil((target-obj.offsetLeft)/10); // if(step&lt;1) clearInterval(obj.timer); obj.style.left=obj.offsetLeft+step+&#x27;px&#x27;; console.log(&quot;lasting&quot;); &#125;,15) &#125; var div=document.querySelector(&#x27;div&#x27;); animate(div,700)&lt;/script&gt; 实现后退(比如点击500到达500位置，点击800到达800位置，实现前进后退功能)： step&lt;0要向下取整,要加判断 1step = step&lt;0?Math.floor(step):Math.ceil(step) 动画函数添加回调函数 将函数名作为参数传递过去 123456789101112131415161718192021&lt;script&gt; function animate(obj,target,callback)&#123; obj.timer=setInterval(function()&#123; if(obj.offsetLeft==target)&#123; clearInterval(obj.timer); //定时器结束后执行callback函数 if(callback)&#123; callback(); &#125; &#125; //再计时器内部设置步长,将步长设置为整数，避免出现精度问题而无法正常到达目标位置 var step=Math.ceil((target-obj.offsetLeft)/10); // if(step&lt;1) clearInterval(obj.timer); obj.style.left=obj.offsetLeft+step+&#x27;px&#x27;; // console.log(&quot;lasting&quot;); &#125;,15); &#125; var div=document.querySelector(&#x27;div&#x27;); animate(div,700,function()&#123;console.log(&quot;hello&quot;);&#125;)&lt;/script&gt; 动画函数单独封装成一个js文件 小项目：引用animate动画函数 通过一下方式引用 1&lt;script src=&quot;animate.js&quot;&gt;&lt;/script&gt; 出现的问题： 1234567891011121314151617function animate(obj,target,callback)&#123; clearInterval(obj.timer); obj.timer=setInterval(function()&#123; console.log(obj.offsetLeft); var step=(target-obj.offsetLeft)/10; step = step&lt;0?Math.floor(step):Math.ceil(step) if(obj.offsetLeft==target)&#123; clearInterval(obj.timer); //定时器结束后执行callback函数 callback&amp;&amp;callback(); &#125; //再计时器内部设置步长,将步长设置为整数，避免出现精度问题而无法正常到达目标位置 obj.style.left=obj.offsetLeft+step+&#x27;px&#x27;; &#125;,15);&#125; 中间的 1if(obj.offsetLeft==target)() 最好使用==，因为存在如果target是负值-160的时候，而此时是&gt;=,(target-obj.offsetLeft)/10=(-160-0)/10=-16,这是会发现-16是&gt;=target，也就是-16&gt;=-160的，所以执行一次就clear了，所以综上，还是使用== 12var step=(target-obj.offsetLeft)/10;step = step&lt;0?Math.floor(step):Math.ceil(step) 第一行先保持原样，第二行在据实际判断执行的操作 小项目1：网页轮播图，在品优购上面操作 手动调用事件，例如： arrow_r.click():模拟手动点击触发事件 节流阀 小项目2：返回顶部 window.scrollTo(x,y) 滚动到文档中的某个坐标。 1234window.scrollTo(&#123; top: 1000, behavior: &quot;smooth&quot;&#125;); 小项目3：筋斗云 ¶移动端网页特效","tags":["javascript","dom","bom"],"categories":["javascript"]},{"title":"javaweb开发技术-第五章实验","path":"/2022/09/18/javaweb开发技术-第五章实验/","content":"¶javaweb开发技术教程（第二版）第五章实验 将用户的会话信息存储在session中 ¶goods.jsp 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/18 Time: 17:08 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=GBK&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; &#125; h3 &#123; text-align: center; &#125; .tb &#123; margin: 40px auto; width: 300px; height: 250px; &#125; table &#123; width: 100%; height: 80%; &#125; button &#123; display: block; width: 80px; height: 30px; margin: 10px auto; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h3&gt;商品列表&lt;/h3&gt;&lt;form action=&quot;goods_ok.jsp&quot; method=&quot;post&quot; class=&quot;tb&quot;&gt; &lt;table border=&quot;1px&quot;&gt; &lt;tr&gt; &lt;td&gt;商品标号&lt;/td&gt; &lt;td&gt;商品名称&lt;/td&gt; &lt;td&gt;商品价格&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;goods&quot; value=&quot;图书&quot;&gt;1&lt;/td&gt; &lt;td&gt;图书&lt;/td&gt; &lt;td&gt;20&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;goods&quot; value=&quot;CD&quot;&gt;2&lt;/td&gt; &lt;td&gt;CD&lt;/td&gt; &lt;td&gt;10&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;goods&quot; value=&quot;衣服&quot;&gt;3&lt;/td&gt; &lt;td&gt;衣服&lt;/td&gt; &lt;td&gt;390&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;goods&quot; value=&quot;玩具&quot;&gt;4&lt;/td&gt; &lt;td&gt;玩具&lt;/td&gt; &lt;td&gt;5&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;goods&quot; value=&quot;手机&quot;&gt;5&lt;/td&gt; &lt;td&gt;手机&lt;/td&gt; &lt;td&gt;2090&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;button type=&quot;submit&quot;&gt;购买&lt;/button&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; ¶goods_ok.jsp 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt;&lt;%@ page import=&quot;java.lang.reflect.Array&quot; %&gt;&lt;%@ page import=&quot;java.util.Arrays&quot; %&gt;&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/18 Time: 17:18 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=GBK&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;% request.setCharacterEncoding(&quot;GBK&quot;); String[] goods = request.getParameterValues(&quot;goods&quot;); if(goods == null)&#123; out.println(&quot;您没有选中的物品&quot;); out.println(&quot;&lt;a href=&#x27;goods.jsp&#x27;&gt;返回商店&lt;/a&gt;&quot;); &#125; else&#123; out.println(&quot;您确定要购买：&quot;); for(String t:goods)&#123; out.print(t+&#x27; &#x27;); &#125; out.println(&#x27;?&#x27;); ArrayList&lt;String&gt; carts = (ArrayList&lt;String&gt;)session.getAttribute(&quot;carts&quot;); if(carts==null)&#123; carts = new ArrayList&lt;String&gt;(); &#125; ArrayList&lt;String&gt; carts_add = (ArrayList&lt;String&gt;)session.getAttribute(&quot;carts_add&quot;); if(carts_add==null)&#123; carts_add = new ArrayList&lt;String&gt;(); &#125; for(String t:goods)&#123; if(!carts.contains(t))&#123; carts_add.add(t); &#125; &#125; session.setAttribute(&quot;carts_add&quot;,carts_add); %&gt; &lt;a href=&quot;carts_yes.jsp&quot;&gt;是&lt;/a&gt; &lt;a href=&quot;carts_no.jsp&quot;&gt;否&lt;/a&gt; &lt;% &#125; %&gt;&lt;/body&gt;&lt;/html&gt; ¶carts_yes.jsp 1234567891011121314151617181920212223242526272829303132&lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt;&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/18 Time: 18:16 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;% request.setCharacterEncoding(&quot;GBK&quot;); ArrayList&lt;String&gt; carts = (ArrayList&lt;String&gt;)session.getAttribute(&quot;carts&quot;); ArrayList&lt;String&gt; carts_add = (ArrayList&lt;String&gt;)session.getAttribute(&quot;carts_add&quot;); if(carts==null)&#123; carts = new ArrayList&lt;String&gt;(); &#125; if(carts_add == null)&#123; carts_add = new ArrayList&lt;String&gt;(); &#125; for(String t:carts_add)&#123; carts.add(t); &#125; session.setAttribute(&quot;carts&quot;,carts); response.sendRedirect(&quot;carts.jsp&quot;); %&gt;&lt;/body&gt;&lt;/html&gt; ¶carts_no.jsp 123456789101112131415161718192021&lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt;&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/18 Time: 18:16 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;% session.setAttribute(&quot;carts_add&quot;,null); response.sendRedirect(&quot;goods.jsp&quot;);%&gt;&lt;/body&gt;&lt;/html&gt; ¶carts.jsp 12345678910111213141516171819202122232425262728293031&lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt;&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/18 Time: 18:22 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;% request.setCharacterEncoding(&quot;GBK&quot;); ArrayList&lt;String&gt; carts = (ArrayList&lt;String&gt;)session.getAttribute(&quot;carts&quot;); ArrayList&lt;String&gt; carts_add = (ArrayList&lt;String&gt;)session.getAttribute(&quot;carts_add&quot;); out.print(&quot;本次新增购买的商品: &quot;); for(String t:carts_add)&#123; out.print(t+&#x27; &#x27;); &#125; out.println(); out.print(&quot;您的购物车里共有: &quot;); for(String t:carts)&#123; out.print(t+&#x27; &#x27;); &#125; out.println(&quot;&lt;a href=&#x27;goods.jsp&#x27;&gt;返回商店&lt;/a&gt;&quot;); %&gt;&lt;/body&gt;&lt;/html&gt;","tags":["code","javaweb","application"],"categories":["javaweb"]},{"title":"application实现网页访问计数功能","path":"/2022/09/18/application实现网页访问计数功能/","content":"用application实现一个网页计数功能，将计数器放在application中 ¶application.jsp 12345678910111213141516171819202122232425262728&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/18 Time: 16:43 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;% int num; if(application.getAttribute(&quot;num&quot;)==null)&#123; num=0; &#125; else&#123; num = (Integer)application.getAttribute(&quot;num&quot;); num++; &#125; application.setAttribute(&quot;num&quot;,num); %&gt; &lt;h3&gt;页面已被访问了&lt;%= num%&gt;次&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;","tags":["code","javaweb","application"],"categories":["javaweb"]},{"title":"cookie实现自动登录功能","path":"/2022/09/17/cookie实现自动登录功能/","content":"使用cookie实现用户自动登录功能 ¶login.jsp 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/17 Time: 20:12 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; &#125; .main &#123; padding-top: 20px; margin: 60px auto; width: 18%; height: 210px; border-radius: 5%; &#125; .man &#123; width: 100%; height: 100px; &#125; .man .top, .down &#123; position: relative; width: 100%; height: 30%; &#125; .main .top .l, .down .l &#123; position: absolute; left: 20px; &#125; .main .top .r, .down .r &#123; position: absolute; right: 10px; &#125; .main .down &#123; margin-top: 15px; &#125; .mess &#123; width: 100%; height: 50px; text-align: center; &#125; .mess .top &#123; width: 100%; height: 50%; &#125; .mess .down &#123; margin-top: 0; width: 100%; height: 50%; &#125; .submit &#123; margin-top: 20px; text-align: center; &#125; .submit button &#123; margin: auto; display: inline-block; width: 100px; height: 30px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;%-- 如果cookie存在并且存储着用户的登录信息，则直接登录跳转页面--%&gt; &lt;% Cookie c[] = request.getCookies(); if(c!=null)&#123; for(int i=0;i&lt;c.length;i++)&#123; if(c[i].getName().equals(&quot;user&quot;))&#123; String user = c[i].getValue(); session.setAttribute(&quot;user&quot;,user); response.sendRedirect(&quot;zy.jsp&quot;); return; &#125; &#125; &#125; %&gt; &lt;form action=&quot;dealLogin.jsp&quot; method=&quot;post&quot; class=&quot;main&quot;&gt; &lt;div class=&quot;man&quot;&gt; &lt;div class=&quot;top&quot;&gt; &lt;div class=&quot;l&quot;&gt;用户名&lt;/div&gt; &lt;div class=&quot;r&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;user&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;down&quot;&gt; &lt;div class=&quot;l&quot;&gt;密码&lt;/div&gt; &lt;div class=&quot;r&quot;&gt;&lt;input type=&quot;password&quot; name=&quot;passwd&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;mess&quot;&gt; &lt;div class=&quot;top&quot;&gt; 不保存用户名 &lt;input type=&quot;radio&quot; name=&quot;timer&quot; value=&quot;0&quot;&gt; &lt;/div&gt; &lt;div class=&quot;down&quot;&gt; &lt;input type=&quot;radio&quot; name=&quot;timer&quot; value=&quot;5&quot;&gt;5秒 &lt;input type=&quot;radio&quot; name=&quot;timer&quot; value=&quot;10&quot;&gt;10秒 &lt;input type=&quot;radio&quot; name=&quot;timer&quot; value=&quot;20&quot;&gt;20秒 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;submit&quot;&gt; &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt; &lt;/div&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; ¶dealLogin.jsp 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/17 Time: 20:48 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;% request.setCharacterEncoding(&quot;UTF-8&quot;); String user = request.getParameter(&quot;user&quot;); String passwd = request.getParameter(&quot;passwd&quot;); if(user.equals(&quot;kittates&quot;)&amp;&amp;passwd.equals(&quot;kittates&quot;)&amp;&amp;user!=null&amp;&amp;passwd!=null)&#123; session.setAttribute(&quot;user&quot;,user); session.setAttribute(&quot;passwd&quot;,passwd); String timer = request.getParameter(&quot;timer&quot;); if(timer!=null)&#123; int num = Integer.parseInt(timer); Cookie c = new Cookie(&quot;user&quot;,user); c.setMaxAge(num); response.addCookie(c);// if(num&gt;0)&#123;// Cookie c = new Cookie(&quot;user&quot;,user);// c.setMaxAge(num);// response.addCookie(c);// &#125; &#125; response.sendRedirect(&quot;zy.jsp&quot;); &#125; else &#123; response.sendRedirect(&quot;login_cookie.jsp&quot;); &#125; %&gt;&lt;/body&gt;&lt;/html&gt; ¶zy.jsp 12345678910111213141516171819202122232425&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/17 Time: 20:58 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;% String user = (String)session.getAttribute(&quot;user&quot;); if(user!=null)&#123; out.println(&quot;&lt;h3&gt;welcome &lt;/h3&gt;&quot;+user); &#125; else &#123; response.sendRedirect(&quot;login.jsp&quot;); &#125; %&gt;&lt;/body&gt;&lt;/html&gt; ¶总结 很带劲😢","tags":["code","javaweb","cookie"],"categories":["javaweb","cookie"]},{"title":"session实现简易购物车","path":"/2022/09/17/session实现简易购物车/","content":"¶简介 通过session实现简易购物车。 session对象保存用户的登录信息以及用户的购物信息，使得用户在不同的页面购买商品后仍能读取幷显示之前所购买的商品。 head.jsp：顶部列表界面，通过&lt;%@ include file=“”%&gt;包含在内 fruit.jsp：水果购物界面 drink.jsp：音频购物界面 buy.jsp：添加到购物车界面，会转向到shop.jsp页面，为商品界面和cart.jsp界面传递用户选取的商品信息 cart.jsp：购物车界面 check.jsp：验证用户登录信息的页面，若没有登录，则不能访问，会自动跳转到login.html页面上 logout.jsp：用户退出页面 ¶login.html 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; &#125; .main &#123; margin-top: 5%; &#125; .title &#123; font-size: 30px; font-weight: 700; text-align: center; &#125; .body &#123; height: 110px; width: 400px; margin: 50px auto; text-align: center; &#125; .user, .passwd &#123; margin: auto; width: 60%; height: 35px; &#125; .user .left, .passwd .left &#123; float: left; margin-right: 10px; &#125; .user .right, .passwd .right&#123; float: left; &#125; .foot &#123; position: relative; margin: auto; width: 100%; height: 20%; &#125; .foot .sub &#123; position: absolute; left: 125px; &#125; .foot .reset &#123; position: absolute; right: 115px; &#125; .sub button, .reset button &#123; width: 70px; height: 40px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=&quot;login.jsp&quot; method=&quot;post&quot; class=&quot;main&quot;&gt; &lt;div class=&quot;title&quot;&gt;用户登录&lt;/div&gt; &lt;div class=&quot;body&quot;&gt; &lt;div class=&quot;user&quot;&gt; &lt;div class=&quot;left&quot;&gt;用户:&lt;/div&gt; &lt;div class=&quot;right&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;user&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;passwd&quot;&gt; &lt;div class=&quot;left&quot;&gt;密码:&lt;/div&gt; &lt;div class=&quot;right&quot;&gt; &lt;input type=&quot;password&quot; name=&quot;passwd&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;foot&quot;&gt; &lt;div class=&quot;sub&quot;&gt; &lt;button type=&quot;submit&quot; name=&quot;submit&quot;&gt;登录&lt;/button&gt; &lt;/div&gt; &lt;div class=&quot;reset&quot;&gt; &lt;button type=&quot;reset&quot; name=&quot;reset&quot;&gt;重置&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; ¶login.jsp 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/16 Time: 23:58 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script&gt; window.onload=function()&#123; var t=4; var span = document.querySelector(&quot;span&quot;); var timer = setInterval(function()&#123; if(t===0) &#123; clearInterval(timer); &#125; else &#123; span.innerHTML=t; t--; &#125; &#125;,1000) &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;% request.setCharacterEncoding(&quot;UTF-8&quot;); String user = request.getParameter(&quot;user&quot;); String passwd = request.getParameter(&quot;passwd&quot;); if(user.length()==0 || passwd.length()==0)&#123; out.println(&quot;&lt;h3&gt;请正确输入，&lt;span&gt;5&lt;/span&gt;秒后返回登录&lt;a href=&#x27;login.html&#x27;&gt;登录页面&lt;/a&gt;&lt;/h3&gt;&quot;); response.setHeader(&quot;Refresh&quot;,&quot;5;url=login.html&quot;); &#125; else if(user.equals(&quot;kittates&quot;)&amp;&amp;passwd.equals(&quot;kittates&quot;) &amp;&amp; user.length()!=0 &amp;&amp;passwd.length()!=0) &#123; session.setAttribute(&quot;loginUserName&quot;,user); response.sendRedirect(&quot;success.jsp?name=&quot;+user); &#125; else &#123; out.println(&quot;&lt;h3&gt;用户名或密码错误，&lt;span&gt;5&lt;/span&gt;秒后返回登录&lt;a href=&#x27;login.html&#x27;&gt;登录页面&lt;/a&gt;&lt;/h3&gt;&quot;); response.setHeader(&quot;Refresh&quot;,&quot;5;url=login.html&quot;); &#125; %&gt;&lt;/body&gt;&lt;/html&gt; ¶success.jsp 1234567891011121314151617181920212223242526272829303132333435363738&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/17 Time: 0:10 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;%--check一下是否用户登录--%&gt;&lt;%@ include file=&quot;check.jsp&quot;%&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script&gt; window.onload=function()&#123; var t=4; var span = document.querySelector(&quot;span&quot;); var timer = setInterval(function()&#123; if(t===0) &#123; clearInterval(timer); &#125; else &#123; span.innerHTML=t; t--; &#125; &#125;,1000) &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;%@ include file=&quot;head.jsp&quot;%&gt; &lt;% out.println(&quot;&lt;h3&gt;欢迎光临 &quot;+name+&quot; 登录成功&lt;/h3&gt;&quot;); %&gt;&lt;/body&gt;&lt;/html&gt; ¶head.jsp 1234567891011121314151617181920212223&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/17 Time: 17:05 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div align=&quot;center&quot;&gt; &lt;a href=&quot;fruit.jsp&quot;&gt;水果店&lt;/a&gt; &lt;a href=&quot;drink.jsp&quot;&gt;饮品店&lt;/a&gt; &lt;a href=&quot;cart.jsp&quot;&gt;购物车&lt;/a&gt; &lt;a href=&quot;logout.jsp&quot;&gt;退出登录&lt;/a&gt; &lt;hr&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; ¶check.jsp 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/17 Time: 17:10 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script&gt; window.onload=function()&#123; var t=4; var span = document.querySelector(&quot;span&quot;); var timer = setInterval(function()&#123; if(t===0) &#123; clearInterval(timer); &#125; else &#123; span.innerHTML=t; t--; &#125; &#125;,1000) &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;% String name = (String)session.getAttribute(&quot;loginUserName&quot;); if(name==null)&#123; out.println(&quot;&lt;h3&gt;请先登录，&lt;span&gt;5&lt;/span&gt;秒后返回登录&lt;a href=&#x27;login.html&#x27;&gt;登录页面&lt;/a&gt;&lt;/h3&gt;&quot;); response.setHeader(&quot;Refresh&quot;,&quot;5;url=login.html&quot;); return; &#125; %&gt;&lt;/body&gt;&lt;/html&gt; ¶fruit.jsp 1234567891011121314151617181920212223242526272829&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/17 Time: 17:21 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;%@ include file=&quot;check.jsp&quot;%&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;%@include file=&quot;head.jsp&quot;%&gt; &lt;div align=&quot;center&quot;&gt; &lt;form action=&quot;buy.jsp&quot; method=&quot;post&quot;&gt; &lt;select name=&quot;goods&quot; id=&quot;&quot;&gt; &lt;option value=&quot;梨&quot;&gt;梨&lt;/option&gt; &lt;option value=&quot;苹果&quot;&gt;苹果&lt;/option&gt; &lt;option value=&quot;香蕉&quot;&gt;香蕉&lt;/option&gt; &lt;option value=&quot;橘子&quot;&gt;橘子&lt;/option&gt; &lt;/select&gt; &lt;button type=&quot;submit&quot; name=&quot;submit&quot;&gt;加入购物车&lt;/button&gt; &lt;/form&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; ¶buy.jsp 123456789101112131415161718192021222324252627282930313233&lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt;&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/17 Time: 17:28 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;%@ include file=&quot;check.jsp&quot;%&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;% request.setCharacterEncoding(&quot;UTF-8&quot;); String goods = request.getParameter(&quot;goods&quot;); if(goods==null)&#123; response.sendRedirect(&quot;success.jsp&quot;); &#125; else&#123; ArrayList&lt;String&gt; carts = (ArrayList&lt;String&gt;)session.getAttribute(&quot;carts&quot;); if(carts == null)&#123; carts = new ArrayList&lt;String&gt;(); &#125; carts.add(goods); session.setAttribute(&quot;carts&quot;,carts); response.sendRedirect(&quot;cart.jsp&quot;); &#125; %&gt;&lt;/body&gt;&lt;/html&gt; ¶drink.jsp 1234567891011121314151617181920212223242526272829&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/17 Time: 17:24 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;%@ include file=&quot;check.jsp&quot;%&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;%@include file=&quot;head.jsp&quot;%&gt; &lt;div align=&quot;center&quot;&gt; &lt;form action=&quot;buy.jsp&quot; method=&quot;post&quot;&gt; &lt;select name=&quot;goods&quot; id=&quot;&quot;&gt; &lt;option value=&quot;啤酒&quot;&gt;啤酒&lt;/option&gt; &lt;option value=&quot;可乐&quot;&gt;可乐&lt;/option&gt; &lt;option value=&quot;牛奶&quot;&gt;牛奶&lt;/option&gt; &lt;option value=&quot;咖啡&quot;&gt;咖啡&lt;/option&gt; &lt;/select&gt; &lt;button type=&quot;submit&quot;&gt;加入购物车&lt;/button&gt; &lt;/form&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; ¶cart.jsp 123456789101112131415161718192021222324252627282930313233&lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt;&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/17 Time: 17:35 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;%@ include file=&quot;check.jsp&quot;%&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;%@include file=&quot;head.jsp&quot;%&gt; &lt;div align=&quot;center&quot;&gt; &lt;% ArrayList&lt;String&gt; carts = (ArrayList&lt;String&gt;)session.getAttribute(&quot;carts&quot;); if(carts==null)&#123; out.print(&quot;&lt;h3&gt;你的购物车为空&lt;/h3&gt;&quot;); &#125; else&#123; out.println(&quot;您的购物车中选购了：&quot;); for(String t:carts)&#123; out.println(t+&quot;&amp;nbsp;&quot;); &#125; out.println(); &#125; %&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; ¶logout.jsp 1234567891011121314151617181920212223242526272829303132333435363738&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/17 Time: 17:40 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;%@ page errorPage=&quot;pageError.jsp&quot;%&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script&gt; window.onload=function()&#123; var t=4; var span = document.querySelector(&quot;span&quot;); var timer = setInterval(function()&#123; if(t===0) &#123; clearInterval(timer); &#125; else &#123; span.innerHTML=t; t--; &#125; &#125;,1000) &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;% session.invalidate(); out.println(&quot;&lt;h3&gt;退出中，&lt;span&gt;5&lt;/span&gt;秒后返回&lt;a href=&#x27;login.html&#x27;&gt;登录页面&lt;/a&gt;&lt;/h3&gt;&quot;); response.setHeader(&quot;Refresh&quot;,&quot;5;url=login.html&quot;); %&gt;&lt;/body&gt;&lt;/html&gt;","tags":["code","javaweb","session"],"categories":["javaweb"]},{"title":"session实现用户登录","path":"/2022/09/17/session实现用户登录/","content":"使用session对象实现用户的登录验证功能，对于没有登录的用户不允许其访问网站页面，登录成功的用户信息将保存到session中，供success.jsp使用;如果直接通过url地址访问success,.jsp，则会因为session为null而重定向的login.html中。 ¶login.html 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; &#125; .title &#123; font-size: 30px; font-weight: 700; text-align: center; &#125; .body &#123; height: 110px; width: 400px; margin: 50px auto; text-align: center; &#125; .user, .passwd &#123; margin: auto; width: 60%; height: 35px; &#125; .user .left, .passwd .left &#123; float: left; margin-right: 10px; &#125; .user .right, .passwd .right&#123; float: left; &#125; .foot &#123; position: relative; margin: auto; width: 100%; height: 20%; &#125; .foot .sub &#123; position: absolute; left: 125px; &#125; .foot .reset &#123; position: absolute; right: 115px; &#125; .sub button, .reset button &#123; width: 70px; height: 40px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=&quot;login.jsp&quot; method=&quot;post&quot; class=&quot;main&quot;&gt; &lt;div class=&quot;title&quot;&gt;用户登录&lt;/div&gt; &lt;div class=&quot;body&quot;&gt; &lt;div class=&quot;user&quot;&gt; &lt;div class=&quot;left&quot;&gt;用户:&lt;/div&gt; &lt;div class=&quot;right&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;user&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;passwd&quot;&gt; &lt;div class=&quot;left&quot;&gt;密码:&lt;/div&gt; &lt;div class=&quot;right&quot;&gt; &lt;input type=&quot;password&quot; name=&quot;passwd&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;foot&quot;&gt; &lt;div class=&quot;sub&quot;&gt; &lt;button type=&quot;submit&quot; name=&quot;submit&quot;&gt;登录&lt;/button&gt; &lt;/div&gt; &lt;div class=&quot;reset&quot;&gt; &lt;button type=&quot;reset&quot; name=&quot;reset&quot;&gt;重置&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; ¶login.jsp 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/16 Time: 23:58 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script&gt; window.onload=function()&#123; var t=4; var span = document.querySelector(&quot;span&quot;); var timer = setInterval(function()&#123; if(t===0) &#123; clearInterval(timer); &#125; else &#123; span.innerHTML=t; t--; &#125; &#125;,1000) &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;% request.setCharacterEncoding(&quot;UTF-8&quot;); String user = request.getParameter(&quot;user&quot;); String passwd = request.getParameter(&quot;passwd&quot;); if(user.length()==0 || passwd.length()==0)&#123; out.println(&quot;&lt;h3&gt;请正确输入，&lt;span&gt;5&lt;/span&gt;秒后返回登录&lt;a href=&#x27;login.html&#x27;&gt;登录页面&lt;/a&gt;&lt;/h3&gt;&quot;); response.setHeader(&quot;Refresh&quot;,&quot;5;url=login.html&quot;); &#125; else if(user.equals(&quot;kittates&quot;)&amp;&amp;passwd.equals(&quot;kittates&quot;) &amp;&amp; user.length()!=0 &amp;&amp;passwd.length()!=0) &#123; session.setAttribute(&quot;loginUserName&quot;,user); response.sendRedirect(&quot;success.jsp?name=&quot;+user); &#125; else &#123; out.println(&quot;&lt;h3&gt;用户名或密码错误，&lt;span&gt;5&lt;/span&gt;秒后返回登录&lt;a href=&#x27;login.html&#x27;&gt;登录页面&lt;/a&gt;&lt;/h3&gt;&quot;); response.setHeader(&quot;Refresh&quot;,&quot;5;url=login.html&quot;); &#125; %&gt;&lt;/body&gt;&lt;/html&gt; ¶success.jsp 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/17 Time: 0:10 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script&gt; window.onload=function()&#123; var t=4; var span = document.querySelector(&quot;span&quot;); var timer = setInterval(function()&#123; if(t===0) &#123; clearInterval(timer); &#125; else &#123; span.innerHTML=t; t--; &#125; &#125;,1000) &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;% String loginUserName = (String)session.getAttribute(&quot;loginUserName&quot;); if(loginUserName==null)&#123; out.println(&quot;&lt;h3&gt;请先登录，&lt;span&gt;5&lt;/span&gt;秒后返回登录&lt;a href=&#x27;login.html&#x27;&gt;登录页面&lt;/a&gt;&lt;/h3&gt;&quot;); response.setHeader(&quot;Refresh&quot;,&quot;5;url=login.html&quot;); &#125; else &#123; out.println(&quot;登录成功! 欢迎&quot;+request.getParameter(&quot;name&quot;)); &#125; %&gt;&lt;/body&gt;&lt;/html&gt; ¶总结 总体来说还算可以，理解了session的使用方式，虽然和学的前端没有什么交集😢 此外配置了emoji😄，可以在页面上面使用emoji了👌","tags":["code","javaweb"],"categories":["javaweb"]},{"title":"模拟用户登录功能","path":"/2022/09/17/模拟用户登录功能/","content":"使用response对象模拟用户登录后的跳转 ¶login.html 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; &#125; .title &#123; font-size: 30px; font-weight: 700; text-align: center; &#125; .body &#123; height: 110px; width: 400px; margin: 50px auto; text-align: center; &#125; .user, .passwd &#123; margin: auto; width: 60%; height: 35px; &#125; .user .left, .passwd .left &#123; float: left; margin-right: 10px; &#125; .user .right, .passwd .right&#123; float: left; &#125; .foot &#123; position: relative; margin: auto; width: 100%; height: 20%; &#125; .foot .sub &#123; position: absolute; left: 125px; &#125; .foot .reset &#123; position: absolute; right: 115px; &#125; .sub button, .reset button &#123; width: 70px; height: 40px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=&quot;login.jsp&quot; method=&quot;post&quot; class=&quot;main&quot;&gt; &lt;div class=&quot;title&quot;&gt;用户登录&lt;/div&gt; &lt;div class=&quot;body&quot;&gt; &lt;div class=&quot;user&quot;&gt; &lt;div class=&quot;left&quot;&gt;用户:&lt;/div&gt; &lt;div class=&quot;right&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;user&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;passwd&quot;&gt; &lt;div class=&quot;left&quot;&gt;密码:&lt;/div&gt; &lt;div class=&quot;right&quot;&gt; &lt;input type=&quot;password&quot; name=&quot;passwd&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;foot&quot;&gt; &lt;div class=&quot;sub&quot;&gt; &lt;button type=&quot;submit&quot; name=&quot;submit&quot;&gt;登录&lt;/button&gt; &lt;/div&gt; &lt;div class=&quot;reset&quot;&gt; &lt;button type=&quot;reset&quot; name=&quot;reset&quot;&gt;重置&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 自己简单的写的，不太美观 因为没有原型图 ¶login.jsp 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/16 Time: 23:58 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script&gt; window.onload=function()&#123; var t=4; var span = document.querySelector(&quot;span&quot;); var timer = setInterval(function()&#123; if(t===0) &#123; clearInterval(timer); &#125; else &#123; span.innerHTML=t; t--; &#125; &#125;,1000) &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;% request.setCharacterEncoding(&quot;UTF-8&quot;); String user = request.getParameter(&quot;user&quot;); String passwd = request.getParameter(&quot;passwd&quot;); if(user.length()==0 || passwd.length()==0)&#123; out.println(&quot;&lt;h3&gt;请正确输入，&lt;span&gt;5&lt;/span&gt;秒后返回登录&lt;a href=&#x27;login.html&#x27;&gt;登录页面&lt;/a&gt;&lt;/h3&gt;&quot;); response.setHeader(&quot;Refresh&quot;,&quot;5;url=login.html&quot;); &#125; else if(user.equals(&quot;kittates&quot;)&amp;&amp;passwd.equals(&quot;kittates&quot;) &amp;&amp; user.length()!=0 &amp;&amp;passwd.length()!=0) &#123; response.sendRedirect(&quot;success.jsp?name=&quot;+user); &#125; else &#123; out.println(&quot;&lt;h3&gt;用户名或密码错误，&lt;span&gt;5&lt;/span&gt;秒后返回登录&lt;a href=&#x27;login.html&#x27;&gt;登录页面&lt;/a&gt;&lt;/h3&gt;&quot;); response.setHeader(&quot;Refresh&quot;,&quot;5;url=login.html&quot;); &#125; %&gt;&lt;/body&gt;&lt;/html&gt; 简简单单写了一个倒计时功能 ¶success.jsp 1234567891011121314151617&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/17 Time: 0:10 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h2&gt;welcome &lt;%= request.getParameter(&quot;name&quot;)%&gt;!&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt; ¶体验 总体来说还算很好，只是在调试hexo的时候浪费了一部分事件，从下午六点多到现在这个点儿，还不算太困：），换做其他天，早就… 明天继续学！","tags":["code","javaweb"],"categories":["javaweb"]},{"title":"javaweb学习的第一天","path":"/2022/09/16/javaweb学习的第一天/","content":"第一次尝试Javaweb的例子 ¶reg.html 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; .title,.Form &#123; text-align: center; &#125; .tb &#123; margin: auto; width: 30%; &#125; &lt;/style&gt; &lt;script&gt; window.onload=function()&#123; var submit=document.querySelector(&quot;.submit&quot;); submit.addEventListener(&quot;click&quot;,function()&#123; var passwd1 = document.querySelector(&quot;.passwd1&quot;).value; var passwd2 = document.querySelector(&quot;.passwd2&quot;).value; if(passwd1===&quot;&quot; || passwd2===&quot;&quot;)&#123; alert(&quot;please enter password&quot;) document.querySelector(&quot;form&quot;).action=&quot;reg.html&quot;; &#125; else if(passwd1!==passwd2 )&#123; alert(&#x27;two password you have writed are not same!&#x27;); document.querySelector(&quot;form&quot;).action=&quot;reg.html&quot;; &#125; else &#123; alert(&quot;success!&quot;) &#125; &#125;) &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 class=&quot;title&quot;&gt;用户注册&lt;/h1&gt; &lt;div class=&quot;Form&quot;&gt; &lt;form action=&quot;reg.jsp&quot; method=&quot;post&quot;&gt; &lt;table border=&quot;1&quot; class=&quot;tb&quot;&gt; &lt;tr&gt; &lt;td&gt;姓名&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;密码&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;passwd&quot; class=&quot;passwd1&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;确认密码&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;repasswd&quot; class=&quot;passwd2&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;性别&lt;/td&gt; &lt;td&gt; &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;男&quot; checked&gt;男 &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;女&quot;&gt;女 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;职位&lt;/td&gt; &lt;td&gt; &lt;select size=1 name=&quot;career&quot; id=&quot;career&quot;&gt; &lt;option value=&quot;教育工作者&quot; selected&gt;教育工作者&lt;/option&gt; &lt;option value=&quot;公司职员&quot;&gt;公司职员&lt;/option&gt; &lt;option value=&quot;自由职业&quot;&gt;自由职业&lt;/option&gt; &lt;option value=&quot;其他&quot;&gt;其他&lt;/option&gt; &lt;/select&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;电话号码&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;tel&quot; name=&quot;tel&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;电子邮件&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;email&quot; name=&quot;mail&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;兴趣爱好&lt;/td&gt; &lt;td&gt; &lt;input type=&quot;checkbox&quot; name=&quot;fav&quot; value=&quot;体育&quot;&gt;体育 &lt;input type=&quot;checkbox&quot; name=&quot;fav&quot; value=&quot;看书&quot;&gt;看书 &lt;input type=&quot;checkbox&quot; name=&quot;fav&quot; value=&quot;旅游&quot;&gt;旅游 &lt;input type=&quot;checkbox&quot; name=&quot;fav&quot; value=&quot;美食&quot;&gt;美食 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;自我简介&lt;/td&gt; &lt;td&gt; &lt;textarea name=&quot;self&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot; &gt;&lt;/textarea&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;2&quot;&gt; &lt;input type=&quot;submit&quot; class=&quot;submit&quot; value=&quot;登录&quot;&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; ¶reg.jsp 123456789101112131415161718192021222324252627282930313233&lt;%-- Created by IntelliJ IDEA. User: DELL Date: 2022/9/16 Time: 18:40 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;%request.setCharacterEncoding(&quot;UTF-8&quot;);%&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;this is a test&lt;/title&gt;&lt;/head&gt;&lt;body&gt; name: &lt;%= request.getParameter(&quot;name&quot;)%&gt;&lt;br&gt; password: &lt;%= request.getParameter(&quot;passwd&quot;)%&gt;&lt;br&gt; sex: &lt;%= request.getParameter(&quot;sex&quot;)%&gt;&lt;br&gt; career: &lt;%= request.getParameter(&quot;career&quot;)%&gt;&lt;br&gt; tel: &lt;%= request.getParameter(&quot;tel&quot;)%&gt;&lt;br&gt; mail: &lt;%= request.getParameter(&quot;mail&quot;)%&gt;&lt;br&gt; &lt;% String[] fav = request.getParameterValues(&quot;fav&quot;); if(fav!=null)&#123; for(String f:fav)&#123; out.print(f); &#125; out.print(&quot;&lt;br&gt;&quot;); &#125; %&gt; self-introduction:&lt;%= request.getParameter(&quot;self&quot;)%&gt;&lt;/body&gt;&lt;/html&gt; ¶困扰之处 有一点困住了，两次密码输入不相同时页面不应该发生跳转，JS学了，也忘了，花了很长时间才解决。 由于submit绑定了js事件，原本以为点击后会先执行表单提交。但结果并不是。 1234567891011f(passwd1===&quot;&quot; || passwd2===&quot;&quot;)&#123; alert(&quot;please enter password&quot;) document.querySelector(&quot;form&quot;).action=&quot;reg.html&quot;;&#125;else if(passwd1!==passwd2 )&#123; alert(&#x27;two password you have writed are not same!&#x27;); document.querySelector(&quot;form&quot;).action=&quot;reg.html&quot;;&#125;else &#123; alert(&quot;success!&quot;)&#125;","tags":["code","javaweb"],"categories":["javaweb"]},{"title":"已知极限反求参数能否用洛必达？......","path":"/2022/08/12/已知极限反求参数能否用洛必达/","content":"一开始只是认为洛必达只能单向使用，但真实的情况不是这样的。如果洛完之后分子分母构成的式子极限证明是存在的，则此时的极限结果和原极限结果是相同的。这一点在求解已知极限反求参数的试题中很常见。 参考1 参考2 9:25","tags":["洛必达","极限"],"categories":["math"]},{"title":"显微小平台","path":"/2022/07/31/显微小平台/","content":"先放图片 这个是几天前制作的，制作这个的原因是：左边的耳机不出声了，本来想凑活着只用一个镜头来看那些小细密零件，结果镜头不好拿，就想着制作一个小平台，以后专门用来观察细小的东西。 结果到现在耳机都没修好，估摸着是插孔那块电线断了，现在只有一个出声，另一个不出声。 也录了一段视频： 以后会不定期的把一些小发明放到这上面记录一下，以前发明的许多小玩意都没有纪念一下就被我拆了零件。","categories":["小发明"]},{"title":"个人博客大体算是建好了","path":"/2022/07/31/个人博客/","content":"总体来说算是建好了 一直以来都想有一个自己的网站，记录一些自己的日常，奈何自己租用的服务器快到期了(还有半年)，只能将其移到github了。 这个是从昨天晚上开始部署的，当时用了fluid主题，感觉这个太花了，不适合我这个简洁的人，所以第二天也就是今天，使用了default主题，在部署的过程中遇到了一些小问题，开源者也没有做详细的介绍，花费了很多时间来搞这些问题。后面还有一些小的问题，这些就不着急了，后面慢慢的修补吧。","tags":["blog"],"categories":["blog"]},{"title":"friends","path":"/friends/index.html","content":""},{"title":"categories","path":"/categories/index.html","content":""},{"title":"简介","path":"/about/index.html","content":"kittates这是个人简介 Welcome to my blog! As a front-end developer, I specialize in HTML, CSS, and JS. Currently, I am expanding my skills by learning node.js and algorithm development. In the near future, I plan to dive into Vue framework as well.In addition to software development, I also have a strong interest in hardware development. Recently, I have been learning about esp8266 nodeMCU and arduino uno, and I enjoy creating projects that combine both software and hardware components.Join me on this journey of continuous learning and growth. Thank you for visiting and I hope you enjoy reading my content!:smile:"},{"title":"photo","path":"/photo/index.html","content":"¶ 2024年5月6号@kittates@kittates@kittates@kittates@kittates 2024年5月5号测试图片@kittates@kittates@kittates@kittates@kittates@kittates@kittates@kittates@kittates"},{"title":"timeline","path":"/timeline/index.html","content":""},{"title":"tags","path":"/tags/index.html","content":""}]